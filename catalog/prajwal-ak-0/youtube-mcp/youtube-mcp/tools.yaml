tools:
  - name: youtube/get-transcript
    description: "

      \    Retrieves the transcript/subtitles for a specified YouTube video.

      \   \ 

      \    Uses the YouTube Transcript API to fetch time-coded transcripts in
      the requested languages.

      \    The transcripts include timing information, text content, and
      duration for each segment.

      \   \ 

      \    Args:

      \        video_id (str): The YouTube video ID (11-character string from
      video URL)

      \        languages (List[str], optional): List of language codes to search
      for transcripts.

      \                                        Defaults to [\"en\"] (English).

      \   \ 

      \    Returns:

      \        List[Dict]: A list containing a single dictionary with:

      \            - type: \"transcript\"

      \            - data: Dictionary containing video_id, segments (list of
      transcript entries),\ 

      \                   and languages requested

      \   \ 

      \    Raises:

      \        ToolError: When transcript retrieval fails (video unavailable, no
      captions, etc.)

      \    "
    inputSchema:
      type: object
      title: get_transcriptArguments
      required:
        - video_id
      properties:
        video_id:
          type: string
          title: Video Id
        languages:
          type: array
          items:
            type: string
          title: Languages
          default:
            - en
  - name: youtube/summarize
    description: "

      \    Generates a concise summary of a YouTube video's content using Gemini
      AI.

      \   \ 

      \    This tool first retrieves the video's transcript, then uses Google's
      Gemini 2.0 Flash

      \    model to create a structured summary of the key points discussed in
      the video.

      \   \ 

      \    Args:

      \        video_id (str): The YouTube video ID to summarize

      \   \ 

      \    Returns:

      \        List[Dict]: A list containing a single dictionary with:

      \            - type: \"summary\"

      \            - data: Dictionary containing video_id, summary text, and
      model used

      \   \ 

      \    Raises:

      \        ToolError: When summarization fails (API key missing, transcript
      unavailable, etc.)

      \    "
    inputSchema:
      type: object
      title: summarize_transcriptArguments
      required:
        - video_id
      properties:
        video_id:
          type: string
          title: Video Id
  - name: youtube/query
    description: "

      \    Answers natural language questions about a YouTube video's content.

      \   \ 

      \    This tool leverages Google's Gemini 2.0 Flash model to provide
      responses to questions

      \    based solely on the video's transcript. It extracts insights, facts,
      and context

      \    without watching the video itself.

      \   \ 

      \    Args:

      \        video_id (str): The YouTube video ID to query

      \        query (str): Natural language question about the video content

      \   \ 

      \    Returns:

      \        List[Dict]: A list containing a single dictionary with:

      \            - type: \"query-response\"

      \            - data: Dictionary containing video_id, the original query,\ 

      \                   the AI-generated response, and model used

      \   \ 

      \    Raises:

      \        ToolError: When query fails (API key missing, transcript
      unavailable, etc.)

      \    "
    inputSchema:
      type: object
      title: query_transcriptArguments
      required:
        - video_id
        - query
      properties:
        query:
          type: string
          title: Query
        video_id:
          type: string
          title: Video Id
  - name: youtube/search
    description: "

      \    Searches YouTube for videos matching a specific query and returns
      detailed metadata.

      \   \ 

      \    This tool performs a two-step API process:

      \    1. First searches for videos matching the query

      \    2. Then fetches detailed metadata for each result (title, channel,
      views, etc.)

      \   \ 

      \    Args:

      \        query (str): Search terms to find relevant videos

      \        max_results (int, optional): Maximum number of results to
      return.\ 

      \                                    Defaults to 5, capped at 50.

      \   \ 

      \    Returns:

      \        List[Dict]: A list containing a single dictionary with:

      \            - type: \"search-results\"

      \            - data: Dictionary containing original query, list of video
      objects

      \                   with detailed metadata, and total result count

      \                  \ 

      \    Video metadata includes:

      \        - id: YouTube video ID

      \        - title: Video title

      \        - description: Video description

      \        - thumbnail: URL to high-quality thumbnail

      \        - channel_title: Channel name

      \        - channel_id: YouTube channel ID

      \        - published_at: Publication timestamp

      \        - views: View count

      \        - likes: Like count

      \        - comments: Comment count

      \        - duration: Video duration in ISO 8601 format

      \   \ 

      \    Raises:

      \        ToolError: When search fails (API key missing, API error, etc.)

      \    "
    inputSchema:
      type: object
      title: search_videosArguments
      required:
        - query
      properties:
        query:
          type: string
          title: Query
        max_results:
          type: integer
          title: Max Results
          default: 5
  - name: youtube/get-comments
    description: "

      \    Retrieves comments from a YouTube video using the YouTube Data API.

      \   \ 

      \    This tool fetches top-level comments from a video's comment section,

      \    including author information, comment text, timestamps, and like
      counts.

      \   \ 

      \    Args:

      \        video_id (str): The YouTube video ID to get comments from

      \        max_comments (int, optional): Maximum number of comments to
      retrieve.

      \                                     Defaults to 100, capped at 100 per
      API limits.

      \   \ 

      \    Returns:

      \        List[Dict]: A list containing a single dictionary with:

      \            - type: \"comments\"

      \            - data: Dictionary containing video_id and a list of comment
      objects

      \                  \ 

      \    Comment objects include metadata from the YouTube API such as:

      \        - authorDisplayName: Comment author's display name

      \        - authorProfileImageUrl: URL to author's profile picture

      \        - authorChannelUrl: URL to author's YouTube channel

      \        - textDisplay: Comment text with formatting

      \        - textOriginal: Plain text version of comment

      \        - likeCount: Number of likes on the comment

      \        - publishedAt: Comment publication timestamp

      \        - updatedAt: Last edit timestamp (if edited)

      \   \ 

      \    Raises:

      \        ToolError: When comment retrieval fails (API key missing,
      comments disabled, etc.)

      \    "
    inputSchema:
      type: object
      title: get_commentsArguments
      required:
        - video_id
      properties:
        video_id:
          type: string
          title: Video Id
        max_comments:
          type: integer
          title: Max Comments
          default: 100
  - name: youtube/get-likes
    description: "

      \    Retrieves the current like count for a specified YouTube video.

      \   \ 

      \    This tool accesses the YouTube Data API to fetch the most up-to-date

      \    engagement statistics for a video, specifically focusing on like
      count.

      \   \ 

      \    Args:

      \        video_id (str): The YouTube video ID to get likes for

      \   \ 

      \    Returns:

      \        List[Dict]: A list containing a single dictionary with:

      \            - type: \"stats\"

      \            - data: Dictionary containing video_id and likes count

      \   \ 

      \    Raises:

      \        ToolError: When like count retrieval fails (API key missing,
      video unavailable, etc.)

      \    "
    inputSchema:
      type: object
      title: get_likesArguments
      required:
        - video_id
      properties:
        video_id:
          type: string
          title: Video Id
