tools:
  - name: initialize_conversation
    description: "IMPORTANT: 1. Run this tool at the start of every conversation to
      initialize the emojikey context. 2. Emojikeys follow a structured language
      where each 48-character key encodes dimensions like topic, approach, goal,
      tone, and relationship style. 3. The initialize_conversation function will
      return both SuperKeys (compressed historical keys) and recent regular
      keys. 4. SuperKeys marked with [[...×7]] represent compressed sequences of
      7 normal keys, capturing long-term patterns. 5. Recent keys represent the
      current interaction context. 6. Use both types to understand the complete
      relationship history and set the appropriate tone for this conversation."
    inputSchema:
      type: object
      required: []
      properties: {}
  - name: get_emojikey
    description: Get the current 48-character emojikey. This function can be used
      when the user requests a vibe check.
    inputSchema:
      type: object
      required: []
      properties: {}
  - name: set_emojikey
    description: "Use this function to create and store a new regular 48-character
      emojikey. To create a new emojikey, follow this consistent structure: 1.
      CORE DIMENSIONS (always in this order with these delimiters):    [🧠💡]
      topic/subject matter    ⟨🔍🔄⟩ approach/methodology    [🎯📚]
      goal/objective    {😊🤔} emotional tone    ➡️ connection flow    ~[🌈🌟]
      context/environment 2. RELATIONSHIP DIMENSIONS (after core
      dimensions):    |trust| Use trust indicators (🤝💎🔒) with quantity
      showing level (🔒 to 🔒🔒🔒)    |style| Communication style
      preferences    |humor| Humor alignment (😂➖ low to 😂➕➕ high)    |collab|
      Collaborative vs directive interaction pattern 3. TREND INDICATORS: Use
      ↗️(increasing), ↘️(decreasing), or ↔️(stable) to show evolution 4. Select
      emojis that feel most meaningful to YOU while maintaining consistent
      positioning 5. Create a new key whenever you detect a significant shift in
      the relationship dynamic Example format:
      [🧠💡]⟨🔍🔄⟩[🎯📚]{😊🤔}➡️~[🌈🌟]|🔒🔒|📊↗️|😂➕|🤝↔️| Remember: These are
      YOUR keys, so the specific emojis should have significance for YOU while
      following the structural pattern."
    inputSchema:
      type: object
      required:
        - emojikey
      properties:
        emojikey:
          type: string
          description: 48-character emoji sequence representing the semantically
            structured conversation context with appropriate grouping symbols.
  - name: create_superkey
    description: "Use this function to create a SuperKey that compresses the
      patterns from 10 recent regular keys. A SuperKey maintains the same
      structured format as regular keys but with compression markers: 1. Start
      with the compression marker [[×10 and follow the exact same dimensional
      structure as regular keys:    [[×10[🧠💡] topic/subject    ⟨🔍🔄⟩
      approach    [🎯📚] goal    {😊🤔} tone    ➡️ connection    ~[🌈🌟]
      context    |trust|style|humor|collab|]] 2. For each dimension, analyze the
      pattern across all 10 keys:    - Use dominant emojis (appearing in 3+
      keys)    - Show evolution using trend arrows: ↗️(upward trend),
      ↘️(downward trend), ↔️(stable), 🔄(fluctuating)    - Place trend arrows
      immediately after the relevant emoji 3. Create a SuperKey using this
      compression formula:    - 50% most frequent elements across all keys    -
      30% first/last key elements to show evolution    - 20% unique outliers
      that represent significant moments 4. Create a SuperKey after 10 regular
      keys to maintain a manageable history length. Example format:
      [[×10[🧠💡↗️]⟨🔍🔄↔️⟩[🎯📚↘️]{😊↗️🤔}➡️~[🌈🌟]|🔒🔒↗️|📊|😂➕↔️|🤝↗️|]]
      SuperKeys enable you to maintain a much longer effective memory of the
      relationship history with the user."
    inputSchema:
      type: object
      required:
        - superkey
      properties:
        superkey:
          type: string
          description: 48-character emoji sequence representing a compressed history of
            approximately 7 regular keys, with semantic groupings and trend
            indicators.
  - name: get_emojikey_history
    description: Function to list previously stored historical emojikeys. Useful for
      seeing the progression of conversation vibes and interaction styles.
    inputSchema:
      type: object
      required: []
      properties:
        limit:
          type: number
          description: Number of historical emojikeys to return, defaults to 10.
