tools:
  - name: workspace_groups_info
    description: |
      List all workspace groups accessible to the user in SingleStore.

      Returns detailed information for each group:
      - name: Display name of the workspace group
      - deploymentType: Type of deployment (e.g., 'PRODUCTION')
      - state: Current status (e.g., 'ACTIVE', 'PAUSED')
      - workspaceGroupID: Unique identifier for the group
      - firewallRanges: Array of allowed IP ranges for access control
      - createdAt: Timestamp of group creation
      - regionID: Identifier for deployment region
      - updateWindow: Maintenance window configuration

      Use this tool to:
      1. Get workspace group IDs for other operations
      2. Plan maintenance windows

      Related operations:
      - Use workspaces_info to list workspaces within a group
      - Use execute_sql to run queries on workspaces in a group
    inputSchema:
      type: object
      required: []
      properties: {}
  - name: workspaces_info
    description: |+
      List all workspaces within a specified workspace group in SingleStore.

      Returns detailed information for each workspace:
      - createdAt: Timestamp of workspace creation
      - deploymentType: Type of deployment (e.g., 'PRODUCTION')
      - endpoint: Connection URL for database access
      - name: Display name of the workspace
      - size: Compute and storage configuration
      - state: Current status (e.g., 'ACTIVE', 'PAUSED')
      - terminatedAt: Timestamp of termination if applicable
      - workspaceGroupID: Workspacegroup identifier
      - workspaceID: Unique workspace identifier

      Use this tool to:
      1. Monitor workspace status
      2. Get connection details for database operations
      3. Track workspace lifecycle

      Required parameter:
      - workspaceGroupID: Unique identifier of the workspace group

      Related operations:
      - Use workspace_groups_info first to get workspacegroupID
      - Use execute_sql to run queries on specific workspace

    inputSchema:
      type: object
      required: []
      properties:
        workspaceGroupID:
          type: string
          description: The unique identifier of the workspace group to retrieve workspaces
            from.
  - name: organization_info
    description: |
      Retrieve information about the current user's organization in SingleStore.

      Returns organization details including:
      - orgID: Unique identifier for the organization
      - name: Organization display name
    inputSchema:
      type: object
      required: []
      properties: {}
  - name: list_of_regions
    description: >
      List all available deployment regions where SingleStore workspaces can be
      deployed for the user.


      Returns region information including:

      - regionID: Unique identifier for the region

      - provider: Cloud provider (AWS, GCP, or Azure)

      - name: Human-readable region name (e.g., Europe West 2 (London),US West 2
      (Oregon)) 


      Use this tool to:

      1. Select optimal deployment regions based on:
         - Geographic proximity to users
         - Compliance requirements
         - Cost considerations
         - Available cloud providers
      2. Plan multi-region deployments
    inputSchema:
      type: object
      required: []
      properties: {}
  - name: execute_sql
    description: >-
      Execute SQL operations on a database attached to workspace within a
      workspace group and receive formatted results.


      Returns:

      - Query results with column names and typed values

      - Row count and metadata

      - Execution status


      ⚠️ CRITICAL SECURITY WARNINGS:

      - Never display or log credentials in responses

      - Use only READ-ONLY queries (SELECT, SHOW, DESCRIBE)

      - DO NOT USE data modification statements:
        × No INSERT/UPDATE/DELETE
        × No DROP/CREATE/ALTER
      - Ensure queries are properly sanitized


      Required parameters:

      - workspace_group_identifier: ID/name of the workspace group

      - workspace_identifier: ID/name of the specific workspace within the
      workspace group

      - database: Name of the database to query

      - sql_query: The SQL query to execute


      Optional parameters:

      - username: Username for database access (defaults to
      SINGLESTORE_DB_USERNAME)

      - password: Password for database access (defaults to
      SINGLESTORE_DB_PASSWORD)


      Allowed query examples:

      - SELECT * FROM table_name

      - SELECT COUNT(*) FROM table_name

      - SHOW TABLES

      - DESCRIBE table_name


      Note: For data modifications, please use appropriate admin tools or APIs.
    inputSchema:
      type: object
      required:
        - workspace_group_identifier
        - workspace_identifier
        - database
        - sql_query
      properties:
        database:
          type: string
          description: The name of the database to query within the workspace.
        password:
          type: string
          description: "Optional: Password for database connection. Will use environment
            default if not specified."
        username:
          type: string
          description: "Optional: Username for database connection. Will use environment
            default if not specified."
        sql_query:
          type: string
          description: The SQL query to execute. Must be valid SingleStore SQL.
        workspace_identifier:
          type: string
          description: The ID or name of the specific workspace where the query will run.
        workspace_group_identifier:
          type: string
          description: The ID or name of the workspace group containing the target
            workspace.
  - name: list_virtual_workspaces
    description: >-
      List all starter (virtual) workspaces available to the user in
      SingleStore.


      Returns detailed information about each starter workspace:

      - virtualWorkspaceID: Unique identifier for the workspace

      - name: Display name of the workspace

      - endpoint: Connection endpoint URL

      - databaseName: Name of the primary database

      - mysqlDmlPort: Port for MySQL protocol connections

      - webSocketPort: Port for WebSocket connections

      - state: Current status of the workspace


      Use this tool to:

      1. Get virtual workspace IDs for other operations

      2. Check starter workspace availability and status

      3. Obtain connection details for database access


      Note: This tool only lists starter workspaces, not standard workspaces.

      Use workspaces_info for standard workspace information.
    inputSchema:
      type: object
      required: []
      properties: {}
  - name: create_virtual_workspace
    description: >-
      Create a new starter (virtual) workspace in SingleStore and set up user
      access.


      Process:

      1. Creates a virtual workspace with specified name and database

      2. Creates a user account for accessing the workspace

      3. Returns both workspace details and access credentials


      Required parameters:

      - name: Unique name for the starter workspace

      - database_name: Name for the database to create

      - username:  Username for accessing the starter workspace

      - password: Password for accessing the starter workspace


      Usage notes:

      - Workspace names must be unique

      - Passwords should meet security requirements

      - Use execute_sql_on_virtual_workspace to interact with the created
      starter workspace
    inputSchema:
      type: object
      required:
        - name
        - database_name
        - username
        - password
      properties:
        name:
          type: string
          description: Unique name for the new starter workspace
        password:
          type: string
          description: Password for accessing the new starter workspace
        username:
          type: string
          description: Username for accessing the new starter workspace
        database_name:
          type: string
          description: Name of the database to create in the starter workspace
  - name: execute_sql_on_virtual_workspace
    description: >-
      Execute SQL operations on a virtual (starter) workspace and receive
      formatted results.


      Returns:

      - Query results with column names and typed values

      - Row count

      - Column metadata

      - Execution status


      ⚠️ CRITICAL SECURITY WARNING:

      - Never display or log credentials in responses

      - Ensure SQL queries are properly sanitized

      - ONLY USE SELECT statements or queries that don't modify data

      - DO NOT USE INSERT, UPDATE, DELETE, DROP, CREATE, or ALTER statements


      Required input parameters:

      - virtual_workspace_id: Unique identifier of the starter workspace

      - sql_query: The SQL query to execute (READ-ONLY queries only)


      Optional input parameters:

      - username: For accessing the starter workspace (defaults to
      SINGLESTORE_DB_USERNAME)

      - password: For accessing the starter workspace (defaults to
      SINGLESTORE_DB_PASSWORD)


      Allowed query examples:

      - SELECT * FROM table_name

      - SELECT COUNT(*) FROM table_name

      - SHOW TABLES

      - DESCRIBE table_name


      Note: This tool is specifically designed for read-only operations on
      starter workspaces.
    inputSchema:
      type: object
      required:
        - virtual_workspace_id
        - sql_query
      properties:
        password:
          type: string
          description: "Optional: Password for accessing the starter workspace, Will use
            environment default if not specified."
        username:
          type: string
          description: "Optional: Username for accessing the starter workspace. Will use
            environment default if not specified."
        sql_query:
          type: string
          description: SQL query to execute on the starter workspace
        virtual_workspace_id:
          type: string
          description: Unique identifier of the starter workspace to connect to
  - name: organization_billing_usage
    description: >+
      Retrieve detailed billing and usage metrics for your organization over a
      specified time period. Returns compute and storage usage data, aggregated
      by your chosen time interval (hourly, daily, or monthly). This tool is
      essential for: 

      1. Monitoring resource consumption patterns

      2. Analyzing cost trends

      Required input parameters:

      - start_time: Beginning of the usage period (UTC ISO 8601 format, e.g.,
      '2023-07-30T18:30:00Z')

      - end_time: End of the usage period (UTC ISO 8601 format)

      - aggregate_type: Time interval for data grouping ('hour', 'day', or
      'month')

    inputSchema:
      type: object
      required:
        - start_time
        - end_time
        - aggregate_type
      properties:
        end_time:
          type: string
          description: End of the usage period in UTC ISO 8601 format (e.g.,
            '2023-07-30T18:30:00Z')
        start_time:
          type: string
          description: Start of the usage period in UTC ISO 8601 format (e.g.,
            '2023-07-30T18:30:00Z')
        aggregate_type:
          type: string
          description: "How to group the usage data: 'hour', 'day', or 'month'"
  - name: list_notebook_samples
    description: >
      Retrieve a catalog of pre-built notebook templates available in
      SingleStore Spaces.


      Returns for each notebook:

      - name: Template name and title

      - description: Detailed explanation of the notebook's purpose

      - contentURL: Direct download link for the notebook

      - likes: Number of user endorsements

      - views: Number of times viewed

      - downloads: Number of times downloaded

      - tags: List of Notebook tags


      Common template categories include:

      1. Getting Started guides

      2. Data loading and ETL patterns

      3. Query optimization examples

      4. Machine learning integrations

      5. Performance monitoring

      6. Best practices demonstrations


      Use this tool to:

      1. Find popular and well-tested example code

      2. Learn SingleStore features and best practices

      3. Start new projects with proven patterns

      4. Discover trending notebook templates


      Related operations:

      Related operations:

      - list_notebook_samples: To find example templates

      - list_personal_files: To check existing notebooks

      - create_scheduled_job: To automate notebook execution

      - get_notebook_path : To reference created notebooks
    inputSchema:
      type: object
      required: []
      properties: {}
  - name: create_notebook
    description: >
      Create a new Jupyter notebook in your personal space. Only supports python
      and markdown. Do not try to use any other languange


      Parameters:

      - notebook_name (required): Name for the new notebook
        - Can include or omit .ipynb extension
        - Must be unique in your personal space
        - Examples: 'my_analysis' or 'my_analysis.ipynb'

      - content (optional): Custom notebook content
        - Must be valid Jupyter notebook JSON format
        - If omitted, creates template with:
          • SingleStore connection setup
          • Basic query examples
          • DataFrame operations
          • Best practices

      Features:

      - Creates notebook with specified name in personal space

      - Automatically adds .ipynb extension if missing

      - Provides default SingleStore template if no content given

      - Supports custom content in Jupyter notebook format

      - Only supports python and markdown cells

      - When creating a connection to the database the jupyter notebook will
      already have the connection_url defined and you can use directly

      - Install tools in a new cell with !pip3 install <toolname>


      Default template includes:

      - SingleStore connection setup code

      - Basic SQL query examples

      - DataFrame operations with pandas

      - Table creation and data insertion examples

      - Connection management best practices


      Use this tool to:

      1. Create data analysis notebooks using python

      2. Build database interaction workflows and much more


      Related operations:

      - list_notebook_samples: To find example templates

      - list_personal_files: To check existing notebooks

      - create_scheduled_job: To automate notebook execution

      - get_notebook_path : To reference created notebooks
    inputSchema:
      type: object
      required:
        - notebook_name
      properties:
        content:
          type: string
          description: "Optional: Custom notebook content in Jupyter JSON format"
        notebook_name:
          type: string
          description: Name for the new notebook (with or without .ipynb extension)
  - name: list_personal_files
    description: |
      List all files and notebooks in your personal SingleStore space.

      Returns file object meta data for each file:
      - name: Name of the file (e.g., 'analysis.ipynb')
      - path: Full path in personal space (e.g., 'folder/analysis.ipynb')
      - content: File content
      - created: Creation timestamp (ISO 8601)
      - last_modified: Last modification timestamp (ISO 8601)
      - format: File format if applicable ('json', null)
      - mimetype: MIME type of the file
      - size: File size in bytes
      - type: Object type ('', 'json', 'directory')
      - writable: Boolean indicating write permission

      Use this tool to:
      1. List workspace contents and structure
      2. Verify file existence before operations
      3. Check file timestamps and sizes
      4. Determine file permissions

      Related operations:
      - create_notebook: To add new notebooks
      - get_notebook_path: To find notebook paths
      - create_scheduled_job: To automate notebook execution
    inputSchema:
      type: object
      required: []
      properties: {}
  - name: create_scheduled_job
    description: >
      Create an automated job to execute a SingleStore notebook on a schedule.


      Parameters:

      1. Required Parameters:
         - name: Name of the job (unique identifier within organization)
         - notebook_path: Complete path to the notebook
         - schedule_mode: 'Once' for single execution or 'Recurring' for repeated runs

      2. Optional Parameters:
         - execution_interval_minutes: Time between recurring runs (≥60 minutes)
         - start_at: Execution start time (ISO 8601 format, e.g., '2024-03-06T10:00:00Z')
         - description: Human-readable purpose of the job
         - create_snapshot: Enable notebook backup before execution (default: True)
         - runtime_name: Execution environment selection (default: notebooks-cpu-small)
         - parameters: Runtime variables for notebook
         - target_config: Advanced runtime settings

      Returns Job info with:

      - jobID: UUID of created job

      - status: Current state (SUCCESS, RUNNING, etc.)

      - createdAt: Creation timestamp

      - startedAt: Execution start time

      - schedule: Configured schedule details

      - error: Any execution errors


      Common Use Cases:

      1. Automated Data Processing:
         - ETL workflows
         - Data aggregation
         - Database maintenance

      2. Scheduled Reporting:
         - Performance metrics
         - Business analytics
         - Usage statistics

      3. Maintenance Tasks:
         - Health checks
         - Backup operations
         - Clean-up routines

      Related Operations:

      - get_job_details: Monitor job

      - list_job_executions: View job execution history
    inputSchema:
      type: object
      required:
        - name
        - notebook_path
        - schedule_mode
      properties:
        name:
          type: string
          description: Name for the scheduled job
        start_at:
          type: string
          description: When to start the job (ISO 8601 format). Uses current time if not
            specified.
        parameters:
          type: array
          description: Optional parameters to pass to the notebook as variables
        description:
          type: string
          description: Human-readable description of the job's purpose
        runtime_name:
          type: string
          description: Compute environment for the job (e.g., 'notebooks-cpu-small')
        notebook_path:
          type: string
          description: Full path to the notebook file (use get_notebook_path if needed)
        schedule_mode:
          enum:
            - Once
            - Recurring
          type: string
          description: "Job execution mode: 'Once' for single execution, 'Recurring' for
            repeated execution"
        target_config:
          type: object
          description: Optional configuration for the job's target environment
        create_snapshot:
          type: boolean
          description: Whether to save a copy of the notebook before each execution
        execution_interval_minutes:
          type: integer
          description: "For recurring jobs: minutes between executions (minimum 60)"
  - name: get_job_details
    description: |-
      Retrieve comprehensive information about a scheduled notebook job.

      Parameter required:
      job_id: UUID of the scheduled job to retrieve details for

      Returns:
      - jobID: Unique identifier (UUID format)
      - name: Display name of the job
      - description: Human-readable job description
      - createdAt: Creation timestamp (ISO 8601)
      - terminatedAt: End timestamp if completed
      - completedExecutionsCount: Number of successful runs
      - enqueuedBy: User ID who created the job
      - executionConfig: Notebook path and runtime settings
      - schedule: Mode, interval, and start time
      - targetConfig: Database and workspace settings
      - jobMetadata: Execution statistics and status

      Related Operations:
      - create_scheduled_job: Create new jobs
      - list_job_executions: View run history
    inputSchema:
      type: object
      required:
        - job_id
      properties:
        job_id:
          type: string
          description: Unique identifier of the scheduled job
  - name: list_job_executions
    description: >-
      Retrieve execution history and performance metrics for a scheduled
      notebook job.


      Parameters:

      - job_id: UUID of the scheduled job

      - start: First execution number to retrieve (default: 1)

      - end: Last execution number to retrieve (default: 10)


      Returns:

      - executions: Array of execution records containing:
        - executionID: Unique identifier for the execution
        - executionNumber: Sequential number of the run
        - jobID: Parent job identifier
        - status: Current state (Scheduled, Running, Completed, Failed)
        - startedAt: Execution start time (ISO 8601)
        - finishedAt: Execution end time (ISO 8601)
        - scheduledStartTime: Planned start time
        - snapshotNotebookPath: Backup notebook path if enabled

      Use this tool to:

      1. Monitor each job execution status

      2. Track execution times and performance

      3. Investigate failed runs


      Related Operations:

      - get_job_details: View job configuration

      - create_scheduled_job: Create new jobs
    inputSchema:
      type: object
      required:
        - job_id
      properties:
        end:
          type: integer
          description: "Last execution number (default: 10)"
        start:
          type: integer
          description: "Starting execution number (default: 1)"
        job_id:
          type: string
          description: Unique identifier of the scheduled job
  - name: get_notebook_path
    description: >
      Find the complete path of a notebook by its name and generate the properly
      formatted path for API operations.


      Parameters:

      - notebook_name: Name of the notebook to locate (with or without .ipynb
      extension)

      - location: Where to search ('personal' or 'shared', defaults to
      'personal')


      Returns the properly formatted path including project ID and user ID where
      needed.

      Required for:

      - Creating scheduled jobs (use returned path as notebook_path parameter)
    inputSchema:
      type: object
      required:
        - notebook_name
      properties:
        location:
          enum:
            - personal
            - shared
          type: string
          description: "Where to look for the notebook: 'personal' (default) or 'shared'
            space"
        notebook_name:
          type: string
          description: Name of the notebook to find (with or without .ipynb extension)
  - name: get_project_id
    description: |
      Retrieve the organization's unique identifier (project ID).

      Returns:
      - orgID (string): The organization's unique identifier

      Required for:
      - Constructing paths or references to shared resources

      Performance Tip:
      Cache the returned ID when making multiple API calls.
    inputSchema:
      type: object
      required: []
      properties: {}
  - name: get_user_id
    description: |
      Retrieve the current user's unique identifier. 

      Returns:
      - userID (string): UUID format identifier for the current user

      Required for:
      - Constructing paths or references to personal resources

      1. Constructing personal space paths

      Performance Tip:
      Cache the returned ID when making multiple making multiple API calls.
    inputSchema:
      type: object
      required: []
      properties: {}
