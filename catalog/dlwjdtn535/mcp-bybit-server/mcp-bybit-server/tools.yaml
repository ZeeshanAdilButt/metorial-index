tools:
  - name: get_secret_key
    description: "

      \    Get secret key from environment variables

      \    :return: Secret key

      \    "
    inputSchema:
      type: object
      title: get_secret_keyArguments
      properties: {}
  - name: get_access_key
    description: "

      \    Get access key from environment variables

      \    :return: Access key

      \    "
    inputSchema:
      type: object
      title: get_access_keyArguments
      properties: {}
  - name: get_orderbook
    description: "

      \    Get orderbook data

      \    :parameter

      \        symbol: Symbol (e.g., BTCUSDT)

      \        limit: Number of orderbook entries to retrieve

      \        category: Category (spot, linear, inverse, etc.)


      \    Args:

      \        category: Category (spot, linear, inverse, etc.)

      \        symbol (str): Symbol (e.g., BTCUSDT)

      \        limit (int): Number of orderbook entries to retrieve


      \    Returns:

      \        Dict: Orderbook data


      \    Example:

      \        get_orderbook(\"spot\", \"BTCUSDT\", 10)


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/market/orderbook

      \    "
    inputSchema:
      type: object
      title: get_orderbookArguments
      required:
        - category
        - symbol
      properties:
        limit:
          type: integer
          title: Limit
          default: 50
          description: Number of orderbook entries to retrieve
        symbol:
          type: string
          title: Symbol
          description: Symbol (e.g., BTCUSDT)
        category:
          type: string
          title: Category
          description: Category (spot, linear, inverse, etc.)
  - name: get_kline
    description: "

      \    Get K-line (candlestick) data


      \    Args:

      \        category (str): Category (spot, linear, inverse, etc.)

      \        symbol (str): Symbol (e.g., BTCUSDT)

      \        interval (str): Time interval (1, 3, 5, 15, 30, 60, 120, 240,
      360, 720, D, W, M)

      \        start (Optional[int]): Start time in milliseconds

      \        end (Optional[int]): End time in milliseconds

      \        limit (int): Number of records to retrieve


      \    Returns:

      \        Dict: K-line data


      \    Example:

      \        get_kline(\"spot\", \"BTCUSDT\", \"1h\", 1625097600000,
      1625184000000, 100)


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/market/kline

      \    "
    inputSchema:
      type: object
      title: get_klineArguments
      required:
        - category
        - symbol
        - interval
      properties:
        end:
          anyOf:
            - type: integer
            - type: "null"
          title: End
          default: null
          description: End time in milliseconds
        limit:
          type: integer
          title: Limit
          default: 200
          description: Number of records to retrieve
        start:
          anyOf:
            - type: integer
            - type: "null"
          title: Start
          default: null
          description: Start time in milliseconds
        symbol:
          type: string
          title: Symbol
          description: Symbol (e.g., BTCUSDT)
        category:
          type: string
          title: Category
          description: Category (spot, linear, inverse, etc.)
        interval:
          type: string
          title: Interval
          description: Time interval (1, 3, 5, 15, 30, 60, 120, 240, 360, 720, D, W, M)
  - name: get_tickers
    description: "

      \    Get ticker information


      \    Args:

      \        category (str): Category (spot, linear, inverse, etc.)

      \        symbol (str): Symbol (e.g., BTCUSDT)


      \    Returns:

      \        Dict: Ticker information


      \    Example:

      \        get_tickers(\"spot\", \"BTCUSDT\")


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/market/tickers

      \    "
    inputSchema:
      type: object
      title: get_tickersArguments
      required:
        - category
        - symbol
      properties:
        symbol:
          type: string
          title: Symbol
          description: Symbol (e.g., BTCUSDT)
        category:
          type: string
          title: Category
          description: Category (spot, linear, inverse, etc.)
  - name: get_wallet_balance
    description: "

      \    Get wallet balance


      \    Args:

      \        accountType (str): Account type (UNIFIED, CONTRACT, SPOT)

      \        coin (Optional[str]): Coin symbol


      \    Returns:

      \        Dict: Wallet balance information


      \    Example:

      \        get_wallet_balance(\"UNIFIED\", \"BTC\")


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/account/wallet-balance

      \    "
    inputSchema:
      type: object
      title: get_wallet_balanceArguments
      required:
        - accountType
      properties:
        coin:
          anyOf:
            - type: string
            - type: "null"
          title: Coin
          default: null
          description: Coin symbol
        accountType:
          type: string
          title: Accounttype
          description: Account type (UNIFIED, CONTRACT, SPOT)
  - name: get_positions
    description: "

      \    Get position information


      \    Args:

      \        category (str): Category (spot, linear, inverse, etc.)

      \        symbol (Optional[str]): Symbol (e.g., BTCUSDT)


      \    Returns:

      \        Dict: Position information


      \    Example:

      \        get_positions(\"spot\", \"BTCUSDT\")


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/position

      \    "
    inputSchema:
      type: object
      title: get_positionsArguments
      required:
        - category
      properties:
        symbol:
          anyOf:
            - type: string
            - type: "null"
          title: Symbol
          default: null
          description: Symbol (e.g., BTCUSDT)
        category:
          type: string
          title: Category
          description: Category (spot, linear, inverse, etc.)
  - name: place_order
    description: "

      \    Execute order


      \    Args:

      \        category (str): Category

      \            - spot: Spot trading

      \                * Minimum order quantity: 0.000011 BTC (up to 6 decimal
      places)

      \                * Minimum order amount: 5 USDT

      \                * If buying at market price, qty should be input in USDT
      units (e.g., \"10\" = 10 USDT)

      \                * If selling at market price, qty should be input in BTC
      units (e.g., \"0.000100\" = 0.0001 BTC)

      \                * If placing a limit order, qty should be input in BTC
      units

      \                * positionIdx is not used

      \            - linear: Futures trading (USDT margin)

      \                * positionIdx is required (1: Long, 2: Short)

      \            - inverse: Futures trading (coin margin)

      \                * positionIdx is required (1: Long, 2: Short)

      \        symbol (str): Symbol (e.g., BTCUSDT)

      \        side (str): Order direction (Buy, Sell)

      \        orderType (str): Order type (Market, Limit)

      \        qty (str): Order quantity

      \            - Market Buy: qty should be input in USDT units (e.g., \"10\"
      = 10 USDT)

      \            - Market Sell: qty should be input in BTC units (e.g.,
      \"0.000100\" = 0.0001 BTC, up to 6 decimal places)

      \            - Limit: qty should be input in BTC units (e.g., \"0.000100\"
      = 0.0001 BTC, up to 6 decimal places)

      \        price (Optional[str]): Order price (for limit orders)

      \        positionIdx (Optional[str]): Position index

      \            - Required for futures (linear/inverse) trading

      \            - \"1\": Long position

      \            - \"2\": Short position

      \            - Not used for spot trading

      \        timeInForce (Optional[str]): Order validity period

      \            - GTC: Good Till Cancel (default, for limit orders)

      \            - IOC: Immediate or Cancel (market order)

      \            - FOK: Fill or Kill

      \            - PostOnly: Post Only

      \        orderLinkId (Optional[str]): Order link ID (unique value)

      \        isLeverage (Optional[int]): Use leverage (0: No, 1: Yes)

      \        orderFilter (Optional[str]): Order filter

      \            - Order: Regular order (default)

      \            - tpslOrder: TP/SL order

      \            - StopOrder: Stop order

      \        triggerPrice (Optional[str]): Trigger price

      \        triggerBy (Optional[str]): Trigger basis

      \        orderIv (Optional[str]): Order volatility

      \        takeProfit (Optional[str]): Take profit price

      \        stopLoss (Optional[str]): Stop loss price

      \        tpTriggerBy (Optional[str]): Take profit trigger basis

      \        slTriggerBy (Optional[str]): Stop loss trigger basis

      \        tpLimitPrice (Optional[str]): Take profit limit price

      \        slLimitPrice (Optional[str]): Stop loss limit price

      \        tpOrderType (Optional[str]): Take profit order type (Market,
      Limit)

      \        slOrderType (Optional[str]): Stop loss order type (Market, Limit)


      \    Returns:

      \        Dict: Order result


      \    Example:

      \        # Spot trading (SPOT account balance required)

      \        place_order(\"spot\", \"BTCUSDT\", \"Buy\", \"Market\",
      \"10\")  # Buy market price for 10 USDT

      \        place_order(\"spot\", \"BTCUSDT\", \"Sell\", \"Market\",
      \"0.000100\")  # Sell market price for 0.0001 BTC

      \        place_order(\"spot\", \"BTCUSDT\", \"Buy\", \"Limit\",
      \"0.000100\", price=\"50000\")  # Buy limit order for 0.0001 BTC


      \        # Spot trading - limit order + TP/SL

      \        place_order(\"spot\", \"BTCUSDT\", \"Buy\", \"Limit\",
      \"0.000100\", price=\"50000\",

      \                   takeProfit=\"55000\", stopLoss=\"45000\",  # TP/SL
      setting

      \                   tpOrderType=\"Market\", slOrderType=\"Market\")  #
      Execute TP/SL as market order


      \        # Futures trading

      \        place_order(\"linear\", \"BTCUSDT\", \"Buy\", \"Market\",
      \"0.001\", positionIdx=\"1\")  # Buy market price for long position

      \        place_order(\"linear\", \"BTCUSDT\", \"Sell\", \"Market\",
      \"0.001\", positionIdx=\"2\")  # Sell market price for short position


      \    Notes:

      \        1. Spot trading order quantity restrictions:

      \            - Minimum order quantity: 0.000011 BTC

      \            - Minimum order amount: 5 USDT

      \            - BTC quantity is only allowed up to 6 decimal places (e.g.,
      0.000100 O, 0.0001234 X)

      \        2. Pay attention to unit when buying/selling at market price:

      \            - Buying: qty should be input in USDT units (e.g., \"10\" =
      10 USDT)

      \            - Selling: qty should be input in BTC units (e.g.,
      \"0.000100\" = 0.0001 BTC)

      \        3. Futures trading requires positionIdx:

      \            - Long position: positionIdx=\"1\"

      \            - Short position: positionIdx=\"2\"

      \        4. positionIdx is not used for spot trading


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/order/create-order

      \    "
    inputSchema:
      type: object
      title: place_orderArguments
      required:
        - category
        - symbol
        - side
        - orderType
        - qty
      properties:
        qty:
          type: string
          title: Qty
          description: Order quantity
        side:
          type: string
          title: Side
          description: Order direction (Buy, Sell)
        price:
          anyOf:
            - type: string
            - type: "null"
          title: Price
          default: null
          description: Order price (for limit orders)
        symbol:
          type: string
          title: Symbol
          description: Symbol (e.g., BTCUSDT)
        orderIv:
          anyOf:
            - type: string
            - type: "null"
          title: Orderiv
          default: null
          description: Order volatility
        category:
          type: string
          title: Category
          description: Category (spot, linear, inverse, etc.)
        stopLoss:
          anyOf:
            - type: string
            - type: "null"
          title: Stoploss
          default: null
          description: Stop loss price
        orderType:
          type: string
          title: Ordertype
          description: Order type (Market, Limit)
        triggerBy:
          anyOf:
            - type: string
            - type: "null"
          title: Triggerby
          default: null
          description: Trigger basis
        isLeverage:
          anyOf:
            - type: integer
            - type: "null"
          title: Isleverage
          default: null
          description: "Use leverage (0: No, 1: Yes)"
        takeProfit:
          anyOf:
            - type: string
            - type: "null"
          title: Takeprofit
          default: null
          description: Take profit price
        orderFilter:
          anyOf:
            - type: string
            - type: "null"
          title: Orderfilter
          default: null
          description: Order filter (Order, tpslOrder, StopOrder)
        orderLinkId:
          anyOf:
            - type: string
            - type: "null"
          title: Orderlinkid
          default: null
          description: Order link ID
        positionIdx:
          anyOf:
            - type: string
            - type: "null"
          title: Positionidx
          default: null
          description: "Position index (1: Long, 2: Short)"
        slOrderType:
          anyOf:
            - type: string
            - type: "null"
          title: Slordertype
          default: null
          description: Stop loss order type (Market, Limit)
        slTriggerBy:
          anyOf:
            - type: string
            - type: "null"
          title: Sltriggerby
          default: null
          description: Stop loss trigger basis
        timeInForce:
          anyOf:
            - type: string
            - type: "null"
          title: Timeinforce
          default: null
          description: Time in force (GTC, IOC, FOK, PostOnly)
        tpOrderType:
          anyOf:
            - type: string
            - type: "null"
          title: Tpordertype
          default: null
          description: Take profit order type (Market, Limit)
        tpTriggerBy:
          anyOf:
            - type: string
            - type: "null"
          title: Tptriggerby
          default: null
          description: Take profit trigger basis
        slLimitPrice:
          anyOf:
            - type: string
            - type: "null"
          title: Sllimitprice
          default: null
          description: Stop loss limit price
        tpLimitPrice:
          anyOf:
            - type: string
            - type: "null"
          title: Tplimitprice
          default: null
          description: Take profit limit price
        triggerPrice:
          anyOf:
            - type: string
            - type: "null"
          title: Triggerprice
          default: null
          description: Trigger price
  - name: cancel_order
    description: "

      \    Cancel order


      \    Args:

      \        category (str): Category (spot, linear, inverse, etc.)

      \        symbol (str): Symbol (e.g., BTCUSDT)

      \        orderId (Optional[str]): Order ID

      \        orderLinkId (Optional[str]): Order link ID

      \        orderFilter (Optional[str]): Order filter


      \    Returns:

      \        Dict: Cancel result


      \    Example:

      \        cancel_order(\"spot\", \"BTCUSDT\", \"123456789\")


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/order/cancel-order

      \    "
    inputSchema:
      type: object
      title: cancel_orderArguments
      required:
        - category
        - symbol
      properties:
        symbol:
          type: string
          title: Symbol
          description: Symbol (e.g., BTCUSDT)
        orderId:
          anyOf:
            - type: string
            - type: "null"
          title: Orderid
          default: null
          description: Order ID
        category:
          type: string
          title: Category
          description: Category (spot, linear, inverse, etc.)
        orderFilter:
          anyOf:
            - type: string
            - type: "null"
          title: Orderfilter
          default: null
          description: Order filter
        orderLinkId:
          anyOf:
            - type: string
            - type: "null"
          title: Orderlinkid
          default: null
          description: Order link ID
  - name: get_order_history
    description: "

      \    Get order history


      \    Args:

      \        category (str): Category (spot, linear, inverse, etc.)

      \        symbol (Optional[str]): Symbol (e.g., BTCUSDT)

      \        orderId (Optional[str]): Order ID

      \        orderLinkId (Optional[str]): Order link ID

      \        orderFilter (Optional[str]): Order filter

      \        orderStatus (Optional[str]): Order status

      \        startTime (Optional[int]): Start time in milliseconds

      \        endTime (Optional[int]): End time in milliseconds

      \        limit (int): Number of orders to retrieve


      \    Returns:

      \        Dict: Order history


      \    Example:

      \        get_order_history(\"spot\", \"BTCUSDT\", \"123456789\",
      \"link123\", \"Order\", \"Created\", 1625097600000, 1625184000000, 10)


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/order/order-list

      \    "
    inputSchema:
      type: object
      title: get_order_historyArguments
      required:
        - category
      properties:
        limit:
          type: integer
          title: Limit
          default: 50
          description: Number of orders to retrieve
        symbol:
          anyOf:
            - type: string
            - type: "null"
          title: Symbol
          default: null
          description: Symbol (e.g., BTCUSDT)
        endTime:
          anyOf:
            - type: integer
            - type: "null"
          title: Endtime
          default: null
          description: End time in milliseconds
        orderId:
          anyOf:
            - type: string
            - type: "null"
          title: Orderid
          default: null
          description: Order ID
        category:
          type: string
          title: Category
          description: Category (spot, linear, inverse, etc.)
        startTime:
          anyOf:
            - type: integer
            - type: "null"
          title: Starttime
          default: null
          description: Start time in milliseconds
        orderFilter:
          anyOf:
            - type: string
            - type: "null"
          title: Orderfilter
          default: null
          description: Order filter
        orderLinkId:
          anyOf:
            - type: string
            - type: "null"
          title: Orderlinkid
          default: null
          description: Order link ID
        orderStatus:
          anyOf:
            - type: string
            - type: "null"
          title: Orderstatus
          default: null
          description: Order status
  - name: get_open_orders
    description: "

      \    Get open orders


      \    Args:

      \        category (str): Category (spot, linear, inverse, etc.)

      \        symbol (Optional[str]): Symbol (e.g., BTCUSDT)

      \        orderId (Optional[str]): Order ID

      \        orderLinkId (Optional[str]): Order link ID

      \        orderFilter (Optional[str]): Order filter

      \        limit (int): Number of orders to retrieve


      \    Returns:

      \        Dict: Open orders


      \    Example:

      \        get_open_orders(\"spot\", \"BTCUSDT\", \"123456789\",
      \"link123\", \"Order\", 10)


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/order/open-order

      \    "
    inputSchema:
      type: object
      title: get_open_ordersArguments
      required:
        - category
      properties:
        limit:
          type: integer
          title: Limit
          default: 50
          description: Number of orders to retrieve
        symbol:
          anyOf:
            - type: string
            - type: "null"
          title: Symbol
          default: null
          description: Symbol (e.g., BTCUSDT)
        orderId:
          anyOf:
            - type: string
            - type: "null"
          title: Orderid
          default: null
          description: Order ID
        category:
          type: string
          title: Category
          description: Category (spot, linear, inverse, etc.)
        orderFilter:
          anyOf:
            - type: string
            - type: "null"
          title: Orderfilter
          default: null
          description: Order filter
        orderLinkId:
          anyOf:
            - type: string
            - type: "null"
          title: Orderlinkid
          default: null
          description: Order link ID
  - name: set_trading_stop
    description: "

      \    Set trading stop


      \    Args:

      \        category (str): Category (spot, linear, inverse, etc.)

      \        symbol (str): Symbol (e.g., BTCUSDT)

      \        takeProfit (Optional[str]): Take profit price

      \        stopLoss (Optional[str]): Stop loss price

      \        trailingStop (Optional[str]): Trailing stop

      \        positionIdx (Optional[int]): Position index


      \    Returns:

      \        Dict: Setting result


      \    Example:

      \        set_trading_stop(\"spot\", \"BTCUSDT\", \"55000\", \"45000\",
      \"1000\", 0)


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/position/trading-stop

      \    "
    inputSchema:
      type: object
      title: set_trading_stopArguments
      required:
        - category
        - symbol
      properties:
        symbol:
          type: string
          title: Symbol
          description: Symbol (e.g., BTCUSDT)
        category:
          type: string
          title: Category
          description: Category (spot, linear, inverse, etc.)
        stopLoss:
          anyOf:
            - type: string
            - type: "null"
          title: Stoploss
          default: null
          description: Stop loss price
        takeProfit:
          anyOf:
            - type: string
            - type: "null"
          title: Takeprofit
          default: null
          description: Take profit price
        positionIdx:
          anyOf:
            - type: integer
            - type: "null"
          title: Positionidx
          default: null
          description: Position index
        trailingStop:
          anyOf:
            - type: string
            - type: "null"
          title: Trailingstop
          default: null
          description: Trailing stop
  - name: set_margin_mode
    description: "

      \    Set margin mode


      \    Args:

      \        category (str): Category (spot, linear, inverse, etc.)

      \        symbol (str): Symbol (e.g., BTCUSDT)

      \        tradeMode (int): Trading mode (0: Isolated, 1: Cross)

      \        buyLeverage (str): Buying leverage

      \        sellLeverage (str): Selling leverage


      \    Returns:

      \        Dict: Setting result


      \    Example:

      \        set_margin_mode(\"spot\", \"BTCUSDT\", 0, \"10\", \"10\")


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/account/set-margin-mode

      \    "
    inputSchema:
      type: object
      title: set_margin_modeArguments
      required:
        - category
        - symbol
        - tradeMode
        - buyLeverage
        - sellLeverage
      properties:
        symbol:
          type: string
          title: Symbol
          description: Symbol (e.g., BTCUSDT)
        category:
          type: string
          title: Category
          description: Category (spot, linear, inverse, etc.)
        tradeMode:
          type: integer
          title: Trademode
          description: "Trading mode (0: Isolated, 1: Cross)"
        buyLeverage:
          type: string
          title: Buyleverage
          description: Buying leverage
        sellLeverage:
          type: string
          title: Sellleverage
          description: Selling leverage
  - name: get_api_key_information
    description: "

      \    Get API key information


      \    Returns:

      \        Dict: API key information


      \    Example:

      \        get_api_key_information()


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/user/apikey-info

      \    "
    inputSchema:
      type: object
      title: get_api_key_informationArguments
      properties: {}
  - name: get_instruments_info
    description: "

      \    Get exchange information


      \    Args:

      \        category (str): Category (spot, linear, inverse, etc.)

      \        symbol (str): Symbol (e.g., BTCUSDT)

      \        status (Optional[str]): Status

      \        baseCoin (Optional[str]): Base coin


      \    Returns:

      \        Dict: Exchange information


      \    Example:

      \        get_instruments_info(\"spot\", \"BTCUSDT\", \"Trading\", \"BTC\")


      \    Reference:

      \        https://bybit-exchange.github.io/docs/v5/market/instrument

      \    "
    inputSchema:
      type: object
      title: get_instruments_infoArguments
      required:
        - category
        - symbol
      properties:
        status:
          anyOf:
            - type: string
            - type: "null"
          title: Status
          default: null
          description: Status
        symbol:
          type: string
          title: Symbol
          description: Symbol (e.g., BTCUSDT)
        baseCoin:
          anyOf:
            - type: string
            - type: "null"
          title: Basecoin
          default: null
          description: Base coin
        category:
          type: string
          title: Category
          description: Category (spot, linear, inverse, etc.)
