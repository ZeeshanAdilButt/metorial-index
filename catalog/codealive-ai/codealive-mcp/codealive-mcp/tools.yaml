tools:
  - name: chat_completions
    description: "

      \    Streams chat completions from the CodeAlive API for code-aware
      conversations with knowledge of your codebase.

      \   \ 

      \    Args:

      \        messages: List of message objects with \"role\" and \"content\"
      fields

      \                 Example: [

      \                   {\"role\": \"system\", \"content\": \"Analyze the
      authentication flow\"},

      \                   {\"role\": \"user\", \"content\": \"How does the login
      process work?\"}

      \                 ]

      \       \ 

      \        data_sources: List of data source objects to include in the
      context

      \                     Can include workspace IDs (to chat about all
      repositories in the workspace)

      \                     or specific repository IDs for more focused
      analysis.

      \                     Example: [

      \                       {\"type\": \"repository\", \"id\":
      \"67f664fd4c2a00698a52bb6f\"},

      \                       {\"type\": \"workspace\", \"id\":
      \"5e8f9a2c1d3b7e4a6c9d0f8e\"}

      \                     ]

      \       \ 

      \        stream: Whether to stream the response (must be true,
      non-streaming is not supported)

      \               Default: true

      \       \ 

      \        conversation_id: Optional ID to continue a previous conversation

      \                        Example: \"conv_6789f123a456b789c123d456\"

      \       \ 

      \        debug: Whether to include debug information in the response

      \               Default: false

      \       \ 

      \    Returns:

      \        The generated completion text with code understanding from
      specified repositories/workspaces.

      \        The response will incorporate knowledge from the specified code
      repositories.

      \       \ 

      \    Examples:

      \        1. Start a new conversation about authentication using a specific
      repository:

      \           chat_completions(

      \             messages=[{\"role\": \"user\", \"content\": \"Explain the
      authentication flow in this code\"}],

      \             data_sources=[{\"type\": \"repository\", \"id\":
      \"67f664fd4c2a00698a52bb6f\"}]

      \           )

      \          \ 

      \        2. Start a new conversation using an entire workspace:

      \           chat_completions(

      \             messages=[{\"role\": \"user\", \"content\": \"How do the
      microservices communicate with each other?\"}],

      \             data_sources=[{\"type\": \"workspace\", \"id\":
      \"5e8f9a2c1d3b7e4a6c9d0f8e\"}]

      \           )

      \       \ 

      \        3. Continue an existing conversation:

      \           chat_completions(

      \             messages=[{\"role\": \"user\", \"content\": \"How is
      password hashing implemented?\"}],

      \             conversation_id=\"conv_6789f123a456b789c123d456\"

      \           )

      \   \ 

      \       \ 

      \    Note:

      \        - Either conversation_id OR data_sources is typically provided

      \        - When creating a new conversation, data_sources is optional if
      the API key has exactly one assigned data source

      \        - When continuing a conversation, conversation_id is required

      \        - The conversation maintains context across multiple messages

      \        - Messages should be in chronological order with the newest
      message last

      \        - Choose between workspace-level access (for broader context) or
      repository-level access\ 

      \          (for targeted analysis) based on your query needs

      \        - If a user is working in a local git repository that matches one
      of the indexed repositories

      \          in CodeAlive (by URL), you can leverage this integration for
      enhanced code understanding

      \    "
    inputSchema:
      type: object
      title: chat_completionsArguments
      properties:
        debug:
          type: boolean
          title: Debug
          default: false
        stream:
          type: boolean
          title: Stream
          default: true
        messages:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
          title: Messages
          default: null
        data_sources:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
          title: Data Sources
          default: null
        conversation_id:
          anyOf:
            - type: string
            - type: "null"
          title: Conversation Id
          default: null
  - name: get_data_sources
    description: "

      \    Gets all available data sources (repositories and workspaces) for the
      user's account.

      \   \ 

      \    A data source is a code repository or workspace that has been indexed
      by CodeAlive

      \    and can be used for code search and chat completions.

      \   \ 

      \    Args:

      \        alive_only: If True (default), returns only data sources in
      \"Alive\" state ready for use with chat.

      \                   If False, returns all data sources regardless of
      processing state.

      \                   Example: true

      \       \ 

      \    Returns:

      \        A formatted list of available data sources with the following
      information for each:

      \        - id: Unique identifier for the data source, used in other API
      calls

      \        - name: Human-readable name of the repository or workspace

      \        - type: The type of data source (\"Repository\" or \"Workspace\")

      \        - url: URL of the repository (for Repository type only)

      \        - repositoryIds: List of repository IDs included in the workspace
      (for Workspace type only)

      \        - state: The processing state of the data source (if
      alive_only=false)

      \       \ 

      \    Examples:

      \        1. Get only ready-to-use data sources:

      \           get_data_sources()

      \       \ 

      \        2. Get all data sources including those still processing:

      \           get_data_sources(alive_only=false)

      \       \ 

      \    Note:

      \        Data sources in \"Alive\" state are fully processed and ready for
      search and chat.

      \        Other states include \"New\" (just added), \"Processing\" (being
      indexed),\ 

      \        \"Failed\" (indexing failed), etc.

      \       \ 

      \        For repositories, the URL can be used to match with local git
      repositories

      \        to provide enhanced context for code understanding.

      \       \ 

      \        For workspaces, the repositoryIds can be used to identify and
      work with\ 

      \        individual repositories that make up the workspace.

      \       \ 

      \        Use the returned data source IDs with the search_code and
      chat_completions functions.

      \    "
    inputSchema:
      type: object
      title: get_data_sourcesArguments
      properties:
        alive_only:
          type: boolean
          title: Alive Only
          default: true
  - name: search_code
    description: "

      \    Search for code snippets across the provided data sources using
      natural language or code patterns.

      \   \ 

      \    Args:

      \        query: The search query - can be natural language (\"find
      authentication code\") or code patterns (\"function getUserById\")

      \              For best results, be specific and include relevant keywords
      or function/class names

      \              Example: \"implement JWT token validation\"

      \             \ 

      \        data_source_ids: List of data source IDs to search in (required)

      \                        Can be workspace IDs (to search across all
      repositories in the workspace)\ 

      \                        or individual repository IDs for more targeted
      searches.

      \                        Example: [\"67f664fd4c2a00698a52bb6f\",
      \"5e8f9a2c1d3b7e4a6c9d0f8e\"]

      \                       \ 

      \        mode: Search mode (case-insensitive):

      \              - \"auto\": (Default) RECOMMENDED - Intelligently adapts
      search depth based on query complexity

      \              - \"fast\": Quick scan for exact matches, best for simple
      queries and large codebases

      \              - \"fast_deeper\": Balanced search with moderate semantic
      analysis, good for general use

      \              - \"deep\": Use SPARINGLY - Resource-intensive thorough
      semantic analysis, only for very complex

      \                        conceptual queries when other modes fail to yield
      results

      \              Example: \"auto\"

      \               \ 

      \        include_content: Whether to include the full file content in
      results (default: true)

      \                        Set to false for faster, more concise results
      when only locations are needed

      \                        Example: true

      \       \ 

      \    Returns:

      \        Formatted search results including:

      \        - Source repository/workspace name and type

      \        - File path

      \        - Line numbers

      \        - Code snippet showing the matching section

      \        - Full file content (if include_content=true)

      \       \ 

      \    Examples:

      \        1. Find authentication implementation (using default auto mode -
      recommended):

      \           search_code(query=\"user authentication implementation\",
      data_source_ids=[\"repo123\"])

      \          \ 

      \        2. Find a specific function quickly:

      \           search_code(query=\"calculateTotalPrice function\",
      data_source_ids=[\"repo123\"], mode=\"fast\")

      \          \ 

      \        3. Search across an entire workspace:

      \           search_code(query=\"database connection\",
      data_source_ids=[\"workspace456\"])

      \          \ 

      \        4. Search across specific repositories from different workspaces:

      \           search_code(query=\"authentication flow\",
      data_source_ids=[\"repo123\", \"repo789\"])

      \       \ 

      \        5. Get concise results without full file contents:

      \           search_code(query=\"password reset\",
      data_source_ids=[\"repo123\"], include_content=false)

      \   \ 

      \    Note:

      \        - At least one data_source_id must be provided

      \        - All data sources must be in \"Alive\" state

      \        - The API key must have access to the specified data sources

      \        - Always start with \"auto\" mode first, as it intelligently
      chooses the appropriate search strategy

      \        - The \"deep\" mode should only be used when absolutely necessary
      as it's resource-intensive

      \        - For finding specific implementations, include function names in
      your query

      \        - For understanding architectural patterns, use natural language
      descriptions

      \    "
    inputSchema:
      type: object
      title: search_codeArguments
      required:
        - query
      properties:
        mode:
          type: string
          title: Mode
          default: auto
        query:
          type: string
          title: Query
        data_source_ids:
          type: array
          items:
            type: string
          title: Data Source Ids
          default: null
        include_content:
          type: boolean
          title: Include Content
          default: true
