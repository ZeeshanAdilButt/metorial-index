tools:
  - name: create_graph
    description: >-
      创建新的知识图谱。支持多种图谱类型，如拓扑结构、时间线、变更日志、需求文档等。各图谱类型设计指南：

      -
      topology(组件拓扑结构图)：用于表示系统组件、模块间的依赖关系，建议先创建主要模块节点，再添加组件节点，最后通过边表示调用、依赖、包含等关系

      - timeline(时间线图谱)：用于记录项目重要事件和决策，建议按时间顺序添加事件节点，并链接相关人员和决策

      - changelog(变更日志图谱)：用于追踪功能和组件的变更历史，建议为每个重要变更创建节点，标记变更类型和影响范围

      - requirement(需求文档图谱)：用于需求管理和追踪，建议先创建高层需求，再分解为具体功能点，最后关联到负责人和迭代

      - knowledge_base(知识库图谱)：用于构建领域知识体系，建议从核心概念开始，逐步扩展相关概念和关系

      - ontology(本体论图谱)：用于定义领域概念和关系的形式化表示，适合构建标准化的知识模型
    inputSchema:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        type:
          enum:
            - topology
            - timeline
            - changelog
            - requirement
            - knowledge_base
            - ontology
          type: string
          description: 图谱类型。topology:组件拓扑结构图,timeline:时间线图谱,changelog:变更日志图谱,requirement:需求文档图谱,knowledge_base:知识库图谱,ontology:本体论图谱
        description:
          type: string
  - name: add_node
    description: 向知识图谱添加节点。节点是图谱的基本单元，不同类型的图谱支持不同类型的节点。
    inputSchema:
      type: object
      required:
        - graphId
        - type
        - name
      properties:
        name:
          type: string
        type:
          enum:
            - component
            - module
            - service
            - data
            - api
            - concept
            - resource
            - event
            - change
            - requirement
            - feature
            - iteration
            - decision
            - person
          type: string
          description: 节点类型。组件拓扑图:component/module/service/data/api/concept/resource,
            时间线图谱:event/decision/iteration/person,
            变更日志:change/feature/component/iteration/person,
            需求文档:requirement/feature/component/iteration/person/decision
        graphId:
          type: string
        filePath:
          type: string
        metadata:
          type: object
        description:
          type: string
  - name: add_edge
    description: |-
      在知识图谱中添加边，连接两个节点以构建关系网络。边表示节点之间的关系类型，如依赖、包含、关联等。
      使用前提：
      1. 必须先创建图谱（使用create_graph）
      2. 必须已经创建了源节点和目标节点
      3. 边的类型必须与图谱类型匹配

      使用建议：
      1. 先使用list_graphs获取图谱和节点信息
      2. 确认源节点和目标节点都存在且类型匹配
      3. 根据图谱类型选择合适的边类型
      4. 为边添加有意义的标签，帮助理解关系
      5. 如果关系有强弱之分，可以通过weight参数表示

      返回数据：
      - data: 新创建的边信息
        * id: 边ID
        * type: 边类型
        * sourceId: 源节点ID
        * targetId: 目标节点ID
        * label: 边标签
        * weight: 边权重
    inputSchema:
      type: object
      required:
        - graphId
        - type
        - sourceId
        - targetId
      properties:
        type:
          enum:
            - depends_on
            - imports
            - extends
            - implements
            - calls
            - references
            - contains
            - associated_with
            - precedes
            - transforms_to
            - leads_to
            - implements_req
            - created_by
            - modified_by
            - part_of
          type: string
          description: 边类型。组件拓扑图:depends_on/imports/extends/implements/calls/references/contains/associated_with,
            时间线图谱:precedes/leads_to/created_by/modified_by,
            变更日志:precedes/transforms_to/created_by/modified_by/part_of,
            需求文档:implements_req/depends_on/part_of/created_by/modified_by
        label:
          type: string
        weight:
          type: number
        graphId:
          type: string
        sourceId:
          type: string
        targetId:
          type: string
  - name: publish_graph
    description: |-
      发布知识图谱，将图谱状态从草稿变更为已发布。发布后的图谱仍然可以修改，但建议通过版本管理跟踪重要变更。
      使用前提：
      1. 图谱必须存在且处于草稿状态
      2. 建议在发布前确保图谱内容完整
      3. 确保所有必要的节点和边都已添加

      使用建议：
      1. 先使用list_graphs检查图谱的当前状态
      2. 使用get_node_details检查关键节点的完整性
      3. 在发布前对图谱结构进行最后审查
      4. 记录发布时间，用于版本管理
      5. 发布后及时通知相关团队成员

      返回数据：
      - data: 发布后的图谱信息
        * id: 图谱ID
        * name: 图谱名称
        * type: 图谱类型
        * status: 已发布
        * publishedAt: 发布时间
    inputSchema:
      type: object
      required:
        - graphId
      properties:
        graphId:
          type: string
  - name: list_graphs
    description: |-
      列出所有知识图谱，支持按状态和类型筛选。这是获取已有图谱信息的主要工具，也是获取节点ID的重要途径。
      使用场景：
      1. 查看所有可用的图谱及其基本信息
      2. 获取特定图谱的节点列表，用于后续的边添加或节点详情查询
      3. 按状态筛选图谱，如查看所有草稿或已发布的图谱
      4. 按类型筛选图谱，如只查看拓扑图或时间线图谱

      使用建议：
      1. 首先调用此工具获取图谱列表和节点信息
      2. 从返回的数据中获取需要的图谱ID和节点ID
      3. 使用这些ID调用其他工具（如add_edge、get_node_details）
      4. 建议在进行任何节点或边操作前，先用此工具确认目标图谱的状态

      返回数据：
      - data: 图谱列表，每个图谱包含：
        * id: 图谱ID（用于其他工具的graphId参数）
        * name: 图谱名称
        * description: 图谱描述
        * type: 图谱类型
        * status: 图谱状态
        * nodesCount: 节点数量
        * edgesCount: 边数量
        * createdAt: 创建时间
        * updatedAt: 更新时间
        * publishedAt: 发布时间（如果已发布）
        * nodes: 节点列表，每个节点包含：
          - id: 节点ID（用于add_edge和get_node_details等工具）
          - name: 节点名称
          - type: 节点类型
    inputSchema:
      type: object
      properties:
        type:
          enum:
            - topology
            - timeline
            - changelog
            - requirement
            - knowledge_base
            - ontology
          type: string
          description: |-
            图谱类型筛选：
            - topology: 组件拓扑结构图
            - timeline: 时间线图谱
            - changelog: 变更日志图谱
            - requirement: 需求文档图谱
            - knowledge_base: 知识库图谱
            - ontology: 本体论图谱
        status:
          enum:
            - draft
            - published
            - archived
          type: string
          description: |-
            图谱状态筛选：
            - draft: 草稿状态，可以自由修改
            - published: 已发布状态，建议通过版本管理跟踪变更
            - archived: 已归档状态，不建议修改
  - name: get_node_details
    description: |-
      获取图谱中特定节点的详细信息。此工具需要配合list_graphs工具使用，因为nodeId必须从list_graphs的返回结果中获取。
      使用场景：
      1. 查看节点的完整属性信息
      2. 检查节点关联的资源（SVG/Markdown）
      3. 分析节点与其他节点的关系网络
      4. 在修改节点前查看当前状态

      使用建议：
      1. 先调用list_graphs获取目标图谱的节点列表
      2. 从返回的nodes数组中获取需要的nodeId
      3. 使用获取到的graphId和nodeId调用本工具
      4. 检查返回的关系数据，确定是否需要进一步操作

      返回数据：
      - data: 节点详细信息
        * id: 节点ID
        * name: 节点名称
        * type: 节点类型
        * description: 节点描述
        * filePath: 关联文件路径
        * metadata: 节点元数据
        * resources: 关联资源列表
          - id: 资源ID
          - type: 资源类型(svg/markdown)
          - title: 资源标题
        * relationships: 关系列表
          - id: 边ID
          - type: 边类型
          - targetNode: 目标节点信息
    inputSchema:
      type: object
      required:
        - graphId
        - nodeId
      properties:
        nodeId:
          type: string
          description: 节点ID，必须从list_graphs返回的nodes数组中获取
        graphId:
          type: string
          description: 图谱ID，必须从list_graphs的返回数据中获取
  - name: get_creation_guidelines
    description: |-
      获取SVG图形和Markdown文档的创建规范和指南。此工具是save_resource工具的前置工具，必须在创建和保存任何资源前调用。
      使用场景：
      1. 创建SVG可视化图形前获取绘制规范
      2. 创建Markdown文档前获取格式要求
      3. 批量创建资源前获取完整规范

      使用建议：
      1. 在开始任何资源创建前，先调用此工具获取规范
      2. 仔细阅读并遵循规范中的命名规则和目录结构
      3. 根据规范创建资源后，使用save_resource工具保存
      4. 建议将规范保存下来，供团队成员参考

      返回数据：
      - data: 规范内容
        * guidelines: 规范文本内容
          - 文件命名规则
          - 目录结构要求
          - 格式规范
          - 样式指南
        * type: 规范类型（svg/markdown/all）
        * version: 规范版本
    inputSchema:
      type: object
      required:
        - type
      properties:
        type:
          enum:
            - svg
            - markdown
            - all
          type: string
          description: |-
            规范类型：
            - svg: SVG图形创建规范，包含绘制风格、命名规则等
            - markdown: Markdown文档规范，包含格式要求、目录结构等
            - all: 获取所有规范（推荐）
  - name: save_resource
    description: |-
      保存AI创建的SVG图形或Markdown文档到知识图谱。此工具需要配合get_creation_guidelines和list_graphs工具使用。
      使用场景：
      1. 保存图谱的SVG可视化表示
      2. 保存节点相关的Markdown文档
      3. 批量保存多个资源文件

      使用建议：
      1. 先调用get_creation_guidelines获取资源创建规范
      2. 使用list_graphs获取目标图谱ID和节点ID（如需关联到节点）
      3. 按规范创建资源内容
      4. 使用本工具保存资源
      5. 保存后可使用get_node_details查看资源关联状态

      返回数据：
      - data: 保存的资源信息
        * id: 资源ID
        * type: 资源类型（svg/markdown）
        * title: 资源标题
        * description: 资源描述
        * nodeId: 关联的节点ID（如果有）
        * createdAt: 创建时间
    inputSchema:
      type: object
      required:
        - graphId
        - resourceType
        - title
        - content
      properties:
        title:
          type: string
          description: 资源标题，必须符合get_creation_guidelines中的命名规范
        nodeId:
          type: string
          description: 关联的节点ID（可选），如果提供则必须从list_graphs的nodes数组中获取
        content:
          type: string
          description: 资源内容，必须符合get_creation_guidelines中的格式规范
        graphId:
          type: string
          description: 图谱ID，必须从list_graphs的返回数据中获取
        description:
          type: string
          description: 资源描述（可选）
        resourceType:
          enum:
            - svg
            - markdown
          type: string
          description: |-
            资源类型：
            - svg: SVG图形文件
            - markdown: Markdown文档
  - name: update_node
    description: |-
      修改知识图谱中的节点。此工具需要配合list_graphs和get_node_details工具使用。
      使用场景：
      1. 更新节点的基本信息（名称、描述等）
      2. 更新节点关联的文件路径
      3. 更新节点的元数据信息

      使用建议：
      1. 先调用list_graphs获取目标图谱和节点ID
      2. 使用get_node_details查看节点当前状态
      3. 只更新需要修改的字段，其他字段保持不变
      4. 更新后可再次调用get_node_details确认修改

      返回数据：
      - data: 更新后的节点信息
        * id: 节点ID
        * name: 节点名称
        * type: 节点类型
        * description: 节点描述
        * filePath: 关联文件路径
        * metadata: 节点元数据
        * updatedAt: 更新时间
    inputSchema:
      type: object
      required:
        - graphId
        - nodeId
      properties:
        name:
          type: string
          description: 新的节点名称（可选）
        nodeId:
          type: string
          description: 节点ID，必须从list_graphs的nodes数组中获取
        graphId:
          type: string
          description: 图谱ID，必须从list_graphs的返回数据中获取
        filePath:
          type: string
          description: 新的关联文件路径（可选）
        metadata:
          type: object
          description: 新的节点元数据（可选）
        description:
          type: string
          description: 新的节点描述（可选）
  - name: update_edge
    description: |-
      修改知识图谱中的边。此工具需要配合list_graphs和get_node_details工具使用。
      使用场景：
      1. 更新边的标签信息
      2. 调整边的权重值
      3. 更新边的元数据信息

      使用建议：
      1. 先调用list_graphs获取目标图谱信息
      2. 使用get_node_details查看相关节点的边列表
      3. 只更新需要修改的字段，其他字段保持不变
      4. 更新后可再次调用get_node_details确认修改

      返回数据：
      - data: 更新后的边信息
        * id: 边ID
        * type: 边类型
        * sourceId: 源节点ID
        * targetId: 目标节点ID
        * label: 边标签
        * weight: 边权重
        * metadata: 边元数据
        * updatedAt: 更新时间
    inputSchema:
      type: object
      required:
        - graphId
        - edgeId
      properties:
        label:
          type: string
          description: 新的边标签（可选）
        edgeId:
          type: string
          description: 边ID，必须从get_node_details的relationships数组中获取
        weight:
          type: number
          description: 新的边权重（可选），用于表示关系的强弱程度
        graphId:
          type: string
          description: 图谱ID，必须从list_graphs的返回数据中获取
        metadata:
          type: object
          description: 新的边元数据（可选）
  - name: delete_node
    description: |-
      删除知识图谱中的节点。此工具需要配合list_graphs工具使用，且操作不可撤销。
      使用场景：
      1. 删除错误创建的节点
      2. 删除不再需要的节点
      3. 重构图谱结构时删除冗余节点

      使用建议：
      1. 先调用list_graphs获取目标图谱和节点信息
      2. 使用get_node_details检查节点的关联资源和关系
      3. 确认删除不会影响其他重要节点
      4. 设置confirmDelete为true以确认删除
      5. 建议在删除前备份重要数据

      注意事项：
      - 删除节点会同时删除与该节点相关的所有边
      - 如果节点有关联的资源，资源不会被删除，但会解除关联

      返回数据：
      - data: 删除结果
        * id: 被删除的节点ID
        * name: 节点名称
        * type: 节点类型
        * deletedAt: 删除时间
    inputSchema:
      type: object
      required:
        - graphId
        - nodeId
        - confirmDelete
      properties:
        nodeId:
          type: string
          description: 节点ID，必须从list_graphs的nodes数组中获取
        graphId:
          type: string
          description: 图谱ID，必须从list_graphs的返回数据中获取
        confirmDelete:
          type: boolean
          description: 确认删除，必须设置为true，这是一个安全措施，防止误删除
  - name: delete_edge
    description: |-
      删除知识图谱中的边。此工具需要配合list_graphs和get_node_details工具使用，且操作不可撤销。
      使用场景：
      1. 删除错误创建的关系
      2. 更新节点之间的关系结构
      3. 重构图谱时清理冗余关系

      使用建议：
      1. 先调用list_graphs获取目标图谱信息
      2. 使用get_node_details获取边的详细信息
      3. 确认删除不会破坏重要的关系结构
      4. 设置confirmDelete为true以确认删除

      注意事项：
      - 删除边不会影响相关的节点
      - 删除后需要重新调用get_node_details查看更新后的关系

      返回数据：
      - data: 删除结果
        * id: 被删除的边ID
        * deletedAt: 删除时间
    inputSchema:
      type: object
      required:
        - graphId
        - edgeId
        - confirmDelete
      properties:
        edgeId:
          type: string
          description: 边ID，必须从get_node_details的relationships数组中获取
        graphId:
          type: string
          description: 图谱ID，必须从list_graphs的返回数据中获取
        confirmDelete:
          type: boolean
          description: 确认删除，必须设置为true，这是一个安全措施，防止误删除
  - name: update_resource
    description: |-
      更新知识图谱中的资源信息。此工具需要配合list_graphs和get_node_details工具使用。
      使用场景：
      1. 修改资源的标题或描述
      2. 更新资源的元数据信息
      3. 完善资源的文档说明

      使用建议：
      1. 先调用list_graphs获取目标图谱信息
      2. 使用get_node_details查看资源当前信息
      3. 只更新需要修改的字段
      4. 保持资源命名的一致性

      返回数据：
      - data: 更新后的资源信息
        * id: 资源ID
        * name: 资源名称
        * title: 资源标题
        * description: 资源描述
        * updatedAt: 更新时间
    inputSchema:
      type: object
      required:
        - graphId
        - resourceId
      properties:
        name:
          type: string
          description: 新的资源名称（可选）
        title:
          type: string
          description: 新的资源标题（可选）
        graphId:
          type: string
          description: 图谱ID，必须从list_graphs的返回数据中获取
        resourceId:
          type: string
          description: 资源ID，必须从get_node_details的resources数组中获取
        description:
          type: string
          description: 新的资源描述（可选）
  - name: delete_resource
    description: |-
      删除知识图谱中的资源。此工具需要配合list_graphs和get_node_details工具使用，且操作不可撤销。
      使用场景：
      1. 删除过时的资源文件
      2. 清理不再需要的文档
      3. 移除错误创建的资源

      使用建议：
      1. 先调用list_graphs获取目标图谱信息
      2. 使用get_node_details确认资源的关联关系
      3. 确认删除不会影响其他节点
      4. 设置confirmDelete为true以确认删除
      5. 建议在删除前备份重要资源

      注意事项：
      - 删除资源会同时删除物理文件
      - 会自动解除与所有节点的关联
      - 此操作不可恢复

      返回数据：
      - data: 删除结果
        * id: 被删除的资源ID
        * type: 资源类型
        * deletedAt: 删除时间
    inputSchema:
      type: object
      required:
        - graphId
        - resourceId
        - confirmDelete
      properties:
        graphId:
          type: string
          description: 图谱ID，必须从list_graphs的返回数据中获取
        resourceId:
          type: string
          description: 资源ID，必须从get_node_details的resources数组中获取
        confirmDelete:
          type: boolean
          description: 确认删除，必须设置为true，这是一个安全措施，防止误删除
  - name: unlink_resource
    description: |-
      解除资源与节点的关联关系。此工具需要配合list_graphs和get_node_details工具使用。
      使用场景：
      1. 调整资源的关联关系
      2. 移除错误的资源关联
      3. 重组节点的资源结构

      使用建议：
      1. 先调用list_graphs获取目标图谱信息
      2. 使用get_node_details查看节点的资源关联
      3. 确认解除关联不会影响其他功能
      4. 记录变更以便需要时重新关联

      注意事项：
      - 只解除关联，不删除资源
      - 资源仍然可以被其他节点使用
      - 可以随时重新建立关联

      返回数据：
      - data: 操作结果
        * resourceId: 资源ID
        * nodeId: 节点ID
        * unlinkedAt: 解除关联时间
    inputSchema:
      type: object
      required:
        - graphId
        - nodeId
        - resourceId
      properties:
        nodeId:
          type: string
          description: 节点ID，必须从list_graphs的nodes数组中获取
        graphId:
          type: string
          description: 图谱ID，必须从list_graphs的返回数据中获取
        resourceId:
          type: string
          description: 要解除关联的资源ID，必须从get_node_details的resources数组中获取
