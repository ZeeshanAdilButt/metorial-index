tools:
  - name: superset_auth_check_token_validity
    description: "

      \    Check if the current access token is still valid


      \    Makes a request to the /api/v1/me/ endpoint to test if the current
      token is valid.

      \    Use this to verify authentication status before making other API
      calls.


      \    Returns:

      \        A dictionary with token validity status and any error information

      \    "
    inputSchema:
      type: object
      title: superset_auth_check_token_validityArguments
      properties: {}
  - name: superset_auth_refresh_token
    description: "

      \    Refresh the access token using the refresh endpoint


      \    Makes a request to the /api/v1/security/refresh endpoint to get a new
      access token

      \    without requiring re-authentication with username/password.


      \    Returns:

      \        A dictionary with the new access token or error information

      \    "
    inputSchema:
      type: object
      title: superset_auth_refresh_tokenArguments
      properties: {}
  - name: superset_auth_authenticate_user
    description: "

      \    Authenticate with Superset and get access token


      \    Makes a request to the /api/v1/security/login endpoint to
      authenticate and obtain an access token.

      \    If there's an existing token, will first try to check its validity.

      \    If invalid, will attempt to refresh token before falling back to
      re-authentication.


      \    Args:

      \        username: Superset username (falls back to environment variable
      if not provided)

      \        password: Superset password (falls back to environment variable
      if not provided)

      \        refresh: Whether to refresh the token if invalid (defaults to
      True)


      \    Returns:

      \        A dictionary with authentication status and access token or error
      information

      \    "
    inputSchema:
      type: object
      title: superset_auth_authenticate_userArguments
      properties:
        refresh:
          type: boolean
          title: Refresh
          default: true
        password:
          anyOf:
            - type: string
            - type: "null"
          title: Password
          default: null
        username:
          anyOf:
            - type: string
            - type: "null"
          title: Username
          default: null
  - name: superset_dashboard_list
    description: "

      \    Get a list of dashboards from Superset


      \    Makes a request to the /api/v1/dashboard/ endpoint to retrieve all
      dashboards

      \    the current user has access to view. Results are paginated.


      \    Returns:

      \        A dictionary containing dashboard data including id, title, url,
      and metadata

      \    "
    inputSchema:
      type: object
      title: superset_dashboard_listArguments
      properties: {}
  - name: superset_dashboard_get_by_id
    description: "

      \    Get details for a specific dashboard


      \    Makes a request to the /api/v1/dashboard/{id} endpoint to retrieve
      detailed

      \    information about a specific dashboard.


      \    Args:

      \        dashboard_id: ID of the dashboard to retrieve


      \    Returns:

      \        A dictionary with complete dashboard information including
      components and layout

      \    "
    inputSchema:
      type: object
      title: superset_dashboard_get_by_idArguments
      required:
        - dashboard_id
      properties:
        dashboard_id:
          type: integer
          title: Dashboard Id
  - name: superset_dashboard_create
    description: "

      \    Create a new dashboard in Superset


      \    Makes a request to the /api/v1/dashboard/ POST endpoint to create a
      new dashboard.


      \    Args:

      \        dashboard_title: Title of the dashboard

      \        json_metadata: Optional JSON metadata for dashboard
      configuration,

      \                       can include layout, color scheme, and filter
      configuration


      \    Returns:

      \        A dictionary with the created dashboard information including its
      ID

      \    "
    inputSchema:
      type: object
      title: superset_dashboard_createArguments
      required:
        - dashboard_title
      properties:
        json_metadata:
          type: object
          title: Json Metadata
          default: null
        dashboard_title:
          type: string
          title: Dashboard Title
  - name: superset_dashboard_update
    description: "

      \    Update an existing dashboard


      \    Makes a request to the /api/v1/dashboard/{id} PUT endpoint to update

      \    dashboard properties.


      \    Args:

      \        dashboard_id: ID of the dashboard to update

      \        data: Data to update, can include dashboard_title, slug, owners,
      position, and metadata


      \    Returns:

      \        A dictionary with the updated dashboard information

      \    "
    inputSchema:
      type: object
      title: superset_dashboard_updateArguments
      required:
        - dashboard_id
        - data
      properties:
        data:
          type: object
          title: Data
        dashboard_id:
          type: integer
          title: Dashboard Id
  - name: superset_dashboard_delete
    description: "

      \    Delete a dashboard


      \    Makes a request to the /api/v1/dashboard/{id} DELETE endpoint to
      remove a dashboard.

      \    This operation is permanent and cannot be undone.


      \    Args:

      \        dashboard_id: ID of the dashboard to delete


      \    Returns:

      \        A dictionary with deletion confirmation message

      \    "
    inputSchema:
      type: object
      title: superset_dashboard_deleteArguments
      required:
        - dashboard_id
      properties:
        dashboard_id:
          type: integer
          title: Dashboard Id
  - name: superset_chart_list
    description: "

      \    Get a list of charts from Superset


      \    Makes a request to the /api/v1/chart/ endpoint to retrieve all charts

      \    the current user has access to view. Results are paginated.


      \    Returns:

      \        A dictionary containing chart data including id, slice_name,
      viz_type, and datasource info

      \    "
    inputSchema:
      type: object
      title: superset_chart_listArguments
      properties: {}
  - name: superset_chart_get_by_id
    description: "

      \    Get details for a specific chart


      \    Makes a request to the /api/v1/chart/{id} endpoint to retrieve
      detailed

      \    information about a specific chart/slice.


      \    Args:

      \        chart_id: ID of the chart to retrieve


      \    Returns:

      \        A dictionary with complete chart information including
      visualization configuration

      \    "
    inputSchema:
      type: object
      title: superset_chart_get_by_idArguments
      required:
        - chart_id
      properties:
        chart_id:
          type: integer
          title: Chart Id
  - name: superset_chart_create
    description: "

      \    Create a new chart in Superset


      \    Makes a request to the /api/v1/chart/ POST endpoint to create a new
      visualization.


      \    Args:

      \        slice_name: Name/title of the chart

      \        datasource_id: ID of the dataset or SQL table

      \        datasource_type: Type of datasource ('table' for datasets,
      'query' for SQL)

      \        viz_type: Visualization type (e.g., 'bar', 'line', 'pie',
      'big_number', etc.)

      \        params: Visualization parameters including metrics, groupby,
      time_range, etc.


      \    Returns:

      \        A dictionary with the created chart information including its ID

      \    "
    inputSchema:
      type: object
      title: superset_chart_createArguments
      required:
        - slice_name
        - datasource_id
        - datasource_type
        - viz_type
        - params
      properties:
        params:
          type: object
          title: Params
        viz_type:
          type: string
          title: Viz Type
        slice_name:
          type: string
          title: Slice Name
        datasource_id:
          type: integer
          title: Datasource Id
        datasource_type:
          type: string
          title: Datasource Type
  - name: superset_chart_update
    description: "

      \    Update an existing chart


      \    Makes a request to the /api/v1/chart/{id} PUT endpoint to update

      \    chart properties and visualization settings.


      \    Args:

      \        chart_id: ID of the chart to update

      \        data: Data to update, can include slice_name, description,
      viz_type, params, etc.


      \    Returns:

      \        A dictionary with the updated chart information

      \    "
    inputSchema:
      type: object
      title: superset_chart_updateArguments
      required:
        - chart_id
        - data
      properties:
        data:
          type: object
          title: Data
        chart_id:
          type: integer
          title: Chart Id
  - name: superset_chart_delete
    description: "

      \    Delete a chart


      \    Makes a request to the /api/v1/chart/{id} DELETE endpoint to remove a
      chart.

      \    This operation is permanent and cannot be undone.


      \    Args:

      \        chart_id: ID of the chart to delete


      \    Returns:

      \        A dictionary with deletion confirmation message

      \    "
    inputSchema:
      type: object
      title: superset_chart_deleteArguments
      required:
        - chart_id
      properties:
        chart_id:
          type: integer
          title: Chart Id
  - name: superset_database_list
    description: "

      \    Get a list of databases from Superset


      \    Makes a request to the /api/v1/database/ endpoint to retrieve all
      database

      \    connections the current user has access to. Results are paginated.


      \    Returns:

      \        A dictionary containing database connection information including
      id, name, and configuration

      \    "
    inputSchema:
      type: object
      title: superset_database_listArguments
      properties: {}
  - name: superset_database_get_by_id
    description: "

      \    Get details for a specific database


      \    Makes a request to the /api/v1/database/{id} endpoint to retrieve
      detailed

      \    information about a specific database connection.


      \    Args:

      \        database_id: ID of the database to retrieve


      \    Returns:

      \        A dictionary with complete database configuration information

      \    "
    inputSchema:
      type: object
      title: superset_database_get_by_idArguments
      required:
        - database_id
      properties:
        database_id:
          type: integer
          title: Database Id
  - name: superset_database_create
    description: "

      \    Create a new database connection in Superset


      \    IMPORTANT: Don't call this tool, unless user have given connection
      details. This function will only create database connections with explicit
      user consent and input.

      \    No default values or assumptions will be made without user
      confirmation. All connection parameters,

      \    including sensitive credentials, must be explicitly provided by the
      user.


      \    Makes a POST request to /api/v1/database/ to create a new database
      connection in Superset.

      \    The endpoint requires a valid SQLAlchemy URI and database
      configuration parameters.

      \    The engine parameter will be automatically determined from the
      SQLAlchemy URI prefix if not specified:

      \    - 'postgresql://' -> engine='postgresql'

      \    - 'mysql://' -> engine='mysql'

      \    - 'mssql://' -> engine='mssql'

      \    - 'oracle://' -> engine='oracle'

      \    - 'sqlite://' -> engine='sqlite'


      \    The SQLAlchemy URI must follow the format:
      dialect+driver://username:password@host:port/database

      \    If the URI is not provided, the function will prompt for individual
      connection parameters to construct it.


      \    All required parameters must be provided and validated before
      creating the connection.

      \    The configuration_method parameter should typically be set to
      'sqlalchemy_form'.


      \    Args:

      \        engine: Database engine (e.g., 'postgresql', 'mysql', etc.)

      \        configuration_method: Method used for configuration (typically
      'sqlalchemy_form')

      \        database_name: Name for the database connection

      \        sqlalchemy_uri: SQLAlchemy URI for the connection (e.g.,
      'postgresql://user:pass@host/db')


      \    Returns:

      \        A dictionary with the created database connection information
      including its ID

      \    "
    inputSchema:
      type: object
      title: superset_database_createArguments
      required:
        - engine
        - configuration_method
        - database_name
        - sqlalchemy_uri
      properties:
        engine:
          type: string
          title: Engine
        database_name:
          type: string
          title: Database Name
        sqlalchemy_uri:
          type: string
          title: Sqlalchemy Uri
        configuration_method:
          type: string
          title: Configuration Method
  - name: superset_database_get_tables
    description: "

      \    Get a list of tables for a given database


      \    Makes a request to the /api/v1/database/{id}/tables/ endpoint to
      retrieve

      \    all tables available in the database.


      \    Args:

      \        database_id: ID of the database


      \    Returns:

      \        A dictionary with list of tables including schema and table name
      information

      \    "
    inputSchema:
      type: object
      title: superset_database_get_tablesArguments
      required:
        - database_id
      properties:
        database_id:
          type: integer
          title: Database Id
  - name: superset_database_schemas
    description: "

      \    Get schemas for a specific database


      \    Makes a request to the /api/v1/database/{id}/schemas/ endpoint to
      retrieve

      \    all schemas available in the database.


      \    Args:

      \        database_id: ID of the database


      \    Returns:

      \        A dictionary with list of schema names

      \    "
    inputSchema:
      type: object
      title: superset_database_schemasArguments
      required:
        - database_id
      properties:
        database_id:
          type: integer
          title: Database Id
  - name: superset_database_test_connection
    description: "

      \    Test a database connection


      \    Makes a request to the /api/v1/database/test_connection endpoint to
      verify if

      \    the provided connection details can successfully connect to the
      database.


      \    Args:

      \        database_data: Database connection details including
      sqlalchemy_uri and other parameters


      \    Returns:

      \        A dictionary with connection test results

      \    "
    inputSchema:
      type: object
      title: superset_database_test_connectionArguments
      required:
        - database_data
      properties:
        database_data:
          type: object
          title: Database Data
  - name: superset_database_update
    description: "

      \    Update an existing database connection


      \    Makes a request to the /api/v1/database/{id} PUT endpoint to update

      \    database connection properties.


      \    Args:

      \        database_id: ID of the database to update

      \        data: Data to update, can include database_name, sqlalchemy_uri,
      password, and extra configs


      \    Returns:

      \        A dictionary with the updated database information

      \    "
    inputSchema:
      type: object
      title: superset_database_updateArguments
      required:
        - database_id
        - data
      properties:
        data:
          type: object
          title: Data
        database_id:
          type: integer
          title: Database Id
  - name: superset_database_delete
    description: "

      \    Delete a database connection


      \    Makes a request to the /api/v1/database/{id} DELETE endpoint to
      remove a database connection.

      \    This operation is permanent and cannot be undone. This will also
      remove associated datasets.


      \    Args:

      \        database_id: ID of the database to delete


      \    Returns:

      \        A dictionary with deletion confirmation message

      \    "
    inputSchema:
      type: object
      title: superset_database_deleteArguments
      required:
        - database_id
      properties:
        database_id:
          type: integer
          title: Database Id
  - name: superset_database_get_catalogs
    description: "

      \    Get all catalogs from a database


      \    Makes a request to the /api/v1/database/{id}/catalogs/ endpoint to
      retrieve

      \    all catalogs available in the database.


      \    Args:

      \        database_id: ID of the database


      \    Returns:

      \        A dictionary with list of catalog names for databases that
      support catalogs

      \    "
    inputSchema:
      type: object
      title: superset_database_get_catalogsArguments
      required:
        - database_id
      properties:
        database_id:
          type: integer
          title: Database Id
  - name: superset_database_get_connection
    description: "

      \    Get database connection information


      \    Makes a request to the /api/v1/database/{id}/connection endpoint to
      retrieve

      \    connection details for a specific database.


      \    Args:

      \        database_id: ID of the database


      \    Returns:

      \        A dictionary with detailed connection information

      \    "
    inputSchema:
      type: object
      title: superset_database_get_connectionArguments
      required:
        - database_id
      properties:
        database_id:
          type: integer
          title: Database Id
  - name: superset_database_get_function_names
    description: "

      \    Get function names supported by a database


      \    Makes a request to the /api/v1/database/{id}/function_names/ endpoint
      to retrieve

      \    all SQL functions supported by the database.


      \    Args:

      \        database_id: ID of the database


      \    Returns:

      \        A dictionary with list of supported function names

      \    "
    inputSchema:
      type: object
      title: superset_database_get_function_namesArguments
      required:
        - database_id
      properties:
        database_id:
          type: integer
          title: Database Id
  - name: superset_database_get_related_objects
    description: "

      \    Get charts and dashboards associated with a database


      \    Makes a request to the /api/v1/database/{id}/related_objects/
      endpoint to retrieve

      \    counts and references of charts and dashboards that depend on this
      database.


      \    Args:

      \        database_id: ID of the database


      \    Returns:

      \        A dictionary with counts and lists of related charts and
      dashboards

      \    "
    inputSchema:
      type: object
      title: superset_database_get_related_objectsArguments
      required:
        - database_id
      properties:
        database_id:
          type: integer
          title: Database Id
  - name: superset_database_validate_sql
    description: "

      \    Validate arbitrary SQL against a database


      \    Makes a request to the /api/v1/database/{id}/validate_sql/ endpoint
      to check

      \    if the provided SQL is valid for the specified database.


      \    Args:

      \        database_id: ID of the database

      \        sql: SQL query to validate


      \    Returns:

      \        A dictionary with validation results

      \    "
    inputSchema:
      type: object
      title: superset_database_validate_sqlArguments
      required:
        - database_id
        - sql
      properties:
        sql:
          type: string
          title: Sql
        database_id:
          type: integer
          title: Database Id
  - name: superset_database_validate_parameters
    description: "

      \    Validate database connection parameters


      \    Makes a request to the /api/v1/database/validate_parameters/ endpoint
      to verify

      \    if the provided connection parameters are valid without creating a
      connection.


      \    Args:

      \        parameters: Connection parameters to validate


      \    Returns:

      \        A dictionary with validation results

      \    "
    inputSchema:
      type: object
      title: superset_database_validate_parametersArguments
      required:
        - parameters
      properties:
        parameters:
          type: object
          title: Parameters
  - name: superset_dataset_list
    description: "

      \    Get a list of datasets from Superset


      \    Makes a request to the /api/v1/dataset/ endpoint to retrieve all
      datasets

      \    the current user has access to view. Results are paginated.


      \    Returns:

      \        A dictionary containing dataset information including id,
      table_name, and database

      \    "
    inputSchema:
      type: object
      title: superset_dataset_listArguments
      properties: {}
  - name: superset_dataset_get_by_id
    description: "

      \    Get details for a specific dataset


      \    Makes a request to the /api/v1/dataset/{id} endpoint to retrieve
      detailed

      \    information about a specific dataset including columns and metrics.


      \    Args:

      \        dataset_id: ID of the dataset to retrieve


      \    Returns:

      \        A dictionary with complete dataset information

      \    "
    inputSchema:
      type: object
      title: superset_dataset_get_by_idArguments
      required:
        - dataset_id
      properties:
        dataset_id:
          type: integer
          title: Dataset Id
  - name: superset_dataset_create
    description: "

      \    Create a new dataset in Superset


      \    Makes a request to the /api/v1/dataset/ POST endpoint to create a new
      dataset

      \    from an existing database table or view.


      \    Args:

      \        table_name: Name of the physical table in the database

      \        database_id: ID of the database where the table exists

      \        schema: Optional database schema name where the table is located

      \        owners: Optional list of user IDs who should own this dataset


      \    Returns:

      \        A dictionary with the created dataset information including its
      ID

      \    "
    inputSchema:
      type: object
      title: superset_dataset_createArguments
      required:
        - table_name
        - database_id
      properties:
        owners:
          type: array
          items:
            type: integer
          title: Owners
          default: null
        schema:
          type: string
          title: Schema
          default: null
        table_name:
          type: string
          title: Table Name
        database_id:
          type: integer
          title: Database Id
  - name: superset_sqllab_execute_query
    description: "

      \    Execute a SQL query in SQL Lab


      \    Makes a request to the /api/v1/sqllab/execute/ endpoint to run a SQL
      query

      \    against the specified database.


      \    Args:

      \        database_id: ID of the database to query

      \        sql: SQL query to execute


      \    Returns:

      \        A dictionary with query results or execution status for async
      queries

      \    "
    inputSchema:
      type: object
      title: superset_sqllab_execute_queryArguments
      required:
        - database_id
        - sql
      properties:
        sql:
          type: string
          title: Sql
        database_id:
          type: integer
          title: Database Id
  - name: superset_sqllab_get_saved_queries
    description: "

      \    Get a list of saved queries from SQL Lab


      \    Makes a request to the /api/v1/saved_query/ endpoint to retrieve all
      saved queries

      \    the current user has access to. Results are paginated.


      \    Returns:

      \        A dictionary containing saved query information including id,
      label, and database

      \    "
    inputSchema:
      type: object
      title: superset_sqllab_get_saved_queriesArguments
      properties: {}
  - name: superset_sqllab_format_sql
    description: "

      \    Format a SQL query for better readability


      \    Makes a request to the /api/v1/sqllab/format_sql endpoint to apply
      standard

      \    formatting rules to the provided SQL query.


      \    Args:

      \        sql: SQL query to format


      \    Returns:

      \        A dictionary with the formatted SQL

      \    "
    inputSchema:
      type: object
      title: superset_sqllab_format_sqlArguments
      required:
        - sql
      properties:
        sql:
          type: string
          title: Sql
  - name: superset_sqllab_get_results
    description: "

      \    Get results of a previously executed SQL query


      \    Makes a request to the /api/v1/sqllab/results/ endpoint to retrieve
      results

      \    for an asynchronous query using its result key.


      \    Args:

      \        key: Result key to retrieve


      \    Returns:

      \        A dictionary with query results including column information and
      data rows

      \    "
    inputSchema:
      type: object
      title: superset_sqllab_get_resultsArguments
      required:
        - key
      properties:
        key:
          type: string
          title: Key
  - name: superset_sqllab_estimate_query_cost
    description: "

      \    Estimate the cost of executing a SQL query


      \    Makes a request to the /api/v1/sqllab/estimate endpoint to get
      approximate cost

      \    information for a query before executing it.


      \    Args:

      \        database_id: ID of the database

      \        sql: SQL query to estimate

      \        schema: Optional schema name


      \    Returns:

      \        A dictionary with estimated query cost metrics

      \    "
    inputSchema:
      type: object
      title: superset_sqllab_estimate_query_costArguments
      required:
        - database_id
        - sql
      properties:
        sql:
          type: string
          title: Sql
        schema:
          type: string
          title: Schema
          default: null
        database_id:
          type: integer
          title: Database Id
  - name: superset_sqllab_export_query_results
    description: "

      \    Export the results of a SQL query to CSV


      \    Makes a request to the /api/v1/sqllab/export/{client_id} endpoint to
      download

      \    query results in CSV format.


      \    Args:

      \        client_id: Client ID of the query


      \    Returns:

      \        A dictionary with the exported data or error information

      \    "
    inputSchema:
      type: object
      title: superset_sqllab_export_query_resultsArguments
      required:
        - client_id
      properties:
        client_id:
          type: string
          title: Client Id
  - name: superset_sqllab_get_bootstrap_data
    description: "

      \    Get the bootstrap data for SQL Lab


      \    Makes a request to the /api/v1/sqllab/ endpoint to retrieve
      configuration data

      \    needed for the SQL Lab interface.


      \    Returns:

      \        A dictionary with SQL Lab configuration including allowed
      databases and settings

      \    "
    inputSchema:
      type: object
      title: superset_sqllab_get_bootstrap_dataArguments
      properties: {}
  - name: superset_saved_query_get_by_id
    description: "

      \    Get details for a specific saved query


      \    Makes a request to the /api/v1/saved_query/{id} endpoint to retrieve
      information

      \    about a saved SQL query.


      \    Args:

      \        query_id: ID of the saved query to retrieve


      \    Returns:

      \        A dictionary with the saved query details including SQL text and
      database

      \    "
    inputSchema:
      type: object
      title: superset_saved_query_get_by_idArguments
      required:
        - query_id
      properties:
        query_id:
          type: integer
          title: Query Id
  - name: superset_saved_query_create
    description: "

      \    Create a new saved query


      \    Makes a request to the /api/v1/saved_query/ POST endpoint to save a
      SQL query

      \    for later reuse.


      \    Args:

      \        query_data: Dictionary containing the query information
      including:

      \                   - db_id: Database ID

      \                   - schema: Schema name (optional)

      \                   - sql: SQL query text

      \                   - label: Display name for the saved query

      \                   - description: Optional description of the query


      \    Returns:

      \        A dictionary with the created saved query information including
      its ID

      \    "
    inputSchema:
      type: object
      title: superset_saved_query_createArguments
      required:
        - query_data
      properties:
        query_data:
          type: object
          title: Query Data
  - name: superset_query_stop
    description: "

      \    Stop a running query


      \    Makes a request to the /api/v1/query/stop endpoint to terminate a
      query that

      \    is currently running.


      \    Args:

      \        client_id: Client ID of the query to stop


      \    Returns:

      \        A dictionary with confirmation of query termination

      \    "
    inputSchema:
      type: object
      title: superset_query_stopArguments
      required:
        - client_id
      properties:
        client_id:
          type: string
          title: Client Id
  - name: superset_query_list
    description: "

      \    Get a list of queries from Superset


      \    Makes a request to the /api/v1/query/ endpoint to retrieve query
      history.

      \    Results are paginated and include both finished and running queries.


      \    Returns:

      \        A dictionary containing query information including status,
      duration, and SQL

      \    "
    inputSchema:
      type: object
      title: superset_query_listArguments
      properties: {}
  - name: superset_query_get_by_id
    description: "

      \    Get details for a specific query


      \    Makes a request to the /api/v1/query/{id} endpoint to retrieve
      detailed

      \    information about a specific query execution.


      \    Args:

      \        query_id: ID of the query to retrieve


      \    Returns:

      \        A dictionary with complete query execution information

      \    "
    inputSchema:
      type: object
      title: superset_query_get_by_idArguments
      required:
        - query_id
      properties:
        query_id:
          type: integer
          title: Query Id
  - name: superset_activity_get_recent
    description: "

      \    Get recent activity data for the current user


      \    Makes a request to the /api/v1/log/recent_activity/ endpoint to
      retrieve

      \    a history of actions performed by the current user.


      \    Returns:

      \        A dictionary with recent user activities including viewed charts
      and dashboards

      \    "
    inputSchema:
      type: object
      title: superset_activity_get_recentArguments
      properties: {}
  - name: superset_user_get_current
    description: "

      \    Get information about the currently authenticated user


      \    Makes a request to the /api/v1/me/ endpoint to retrieve the user's
      profile

      \    information including permissions and preferences.


      \    Returns:

      \        A dictionary with user profile data

      \    "
    inputSchema:
      type: object
      title: superset_user_get_currentArguments
      properties: {}
  - name: superset_user_get_roles
    description: "

      \    Get roles for the current user


      \    Makes a request to the /api/v1/me/roles/ endpoint to retrieve all
      roles

      \    assigned to the current user.


      \    Returns:

      \        A dictionary with user role information

      \    "
    inputSchema:
      type: object
      title: superset_user_get_rolesArguments
      properties: {}
  - name: superset_tag_list
    description: "

      \    Get a list of tags from Superset


      \    Makes a request to the /api/v1/tag/ endpoint to retrieve all tags

      \    defined in the Superset instance.


      \    Returns:

      \        A dictionary containing tag information including id and name

      \    "
    inputSchema:
      type: object
      title: superset_tag_listArguments
      properties: {}
  - name: superset_tag_create
    description: "

      \    Create a new tag in Superset


      \    Makes a request to the /api/v1/tag/ POST endpoint to create a new tag

      \    that can be applied to objects like charts and dashboards.


      \    Args:

      \        name: Name for the tag


      \    Returns:

      \        A dictionary with the created tag information

      \    "
    inputSchema:
      type: object
      title: superset_tag_createArguments
      required:
        - name
      properties:
        name:
          type: string
          title: Name
  - name: superset_tag_get_by_id
    description: "

      \    Get details for a specific tag


      \    Makes a request to the /api/v1/tag/{id} endpoint to retrieve
      information

      \    about a specific tag.


      \    Args:

      \        tag_id: ID of the tag to retrieve


      \    Returns:

      \        A dictionary with tag details

      \    "
    inputSchema:
      type: object
      title: superset_tag_get_by_idArguments
      required:
        - tag_id
      properties:
        tag_id:
          type: integer
          title: Tag Id
  - name: superset_tag_objects
    description: "

      \    Get objects associated with tags


      \    Makes a request to the /api/v1/tag/get_objects/ endpoint to retrieve

      \    all objects that have tags assigned to them.


      \    Returns:

      \        A dictionary with tagged objects grouped by tag

      \    "
    inputSchema:
      type: object
      title: superset_tag_objectsArguments
      properties: {}
  - name: superset_tag_delete
    description: "

      \    Delete a tag


      \    Makes a request to the /api/v1/tag/{id} DELETE endpoint to remove a
      tag.

      \    This operation is permanent and cannot be undone.


      \    Args:

      \        tag_id: ID of the tag to delete


      \    Returns:

      \        A dictionary with deletion confirmation message

      \    "
    inputSchema:
      type: object
      title: superset_tag_deleteArguments
      required:
        - tag_id
      properties:
        tag_id:
          type: integer
          title: Tag Id
  - name: superset_tag_object_add
    description: "

      \    Add a tag to an object


      \    Makes a request to tag an object with a specific tag. This creates an
      association

      \    between the tag and the specified object (chart, dashboard, etc.)


      \    Args:

      \        object_type: Type of the object ('chart', 'dashboard', etc.)

      \        object_id: ID of the object to tag

      \        tag_name: Name of the tag to apply


      \    Returns:

      \        A dictionary with the tagging confirmation

      \    "
    inputSchema:
      type: object
      title: superset_tag_object_addArguments
      required:
        - object_type
        - object_id
        - tag_name
      properties:
        tag_name:
          type: string
          title: Tag Name
        object_id:
          type: integer
          title: Object Id
        object_type:
          type: string
          title: Object Type
  - name: superset_tag_object_remove
    description: "

      \    Remove a tag from an object


      \    Makes a request to remove a tag association from a specific object.


      \    Args:

      \        object_type: Type of the object ('chart', 'dashboard', etc.)

      \        object_id: ID of the object to untag

      \        tag_name: Name of the tag to remove


      \    Returns:

      \        A dictionary with the untagging confirmation message

      \    "
    inputSchema:
      type: object
      title: superset_tag_object_removeArguments
      required:
        - object_type
        - object_id
        - tag_name
      properties:
        tag_name:
          type: string
          title: Tag Name
        object_id:
          type: integer
          title: Object Id
        object_type:
          type: string
          title: Object Type
  - name: superset_explore_form_data_create
    description: "

      \    Create form data for chart exploration


      \    Makes a request to the /api/v1/explore/form_data POST endpoint to
      store

      \    chart configuration data temporarily.


      \    Args:

      \        form_data: Chart configuration including datasource, metrics, and
      visualization settings


      \    Returns:

      \        A dictionary with a key that can be used to retrieve the form
      data

      \    "
    inputSchema:
      type: object
      title: superset_explore_form_data_createArguments
      required:
        - form_data
      properties:
        form_data:
          type: object
          title: Form Data
  - name: superset_explore_form_data_get
    description: "

      \    Get form data for chart exploration


      \    Makes a request to the /api/v1/explore/form_data/{key} endpoint to
      retrieve

      \    previously stored chart configuration.


      \    Args:

      \        key: Key of the form data to retrieve


      \    Returns:

      \        A dictionary with the stored chart configuration

      \    "
    inputSchema:
      type: object
      title: superset_explore_form_data_getArguments
      required:
        - key
      properties:
        key:
          type: string
          title: Key
  - name: superset_explore_permalink_create
    description: "

      \    Create a permalink for chart exploration


      \    Makes a request to the /api/v1/explore/permalink POST endpoint to
      generate

      \    a shareable link to a specific chart exploration state.


      \    Args:

      \        state: State data for the permalink including form_data


      \    Returns:

      \        A dictionary with a key that can be used to access the permalink

      \    "
    inputSchema:
      type: object
      title: superset_explore_permalink_createArguments
      required:
        - state
      properties:
        state:
          type: object
          title: State
  - name: superset_explore_permalink_get
    description: "

      \    Get a permalink for chart exploration


      \    Makes a request to the /api/v1/explore/permalink/{key} endpoint to
      retrieve

      \    a previously saved exploration state.


      \    Args:

      \        key: Key of the permalink to retrieve


      \    Returns:

      \        A dictionary with the stored exploration state

      \    "
    inputSchema:
      type: object
      title: superset_explore_permalink_getArguments
      required:
        - key
      properties:
        key:
          type: string
          title: Key
  - name: superset_menu_get
    description: "

      \    Get the Superset menu data


      \    Makes a request to the /api/v1/menu/ endpoint to retrieve the
      navigation

      \    menu structure based on user permissions.


      \    Returns:

      \        A dictionary with menu items and their configurations

      \    "
    inputSchema:
      type: object
      title: superset_menu_getArguments
      properties: {}
  - name: superset_config_get_base_url
    description: "

      \    Get the base URL of the Superset instance


      \    Returns the configured Superset base URL that this MCP server is
      connecting to.

      \    This can be useful for constructing full URLs to Superset resources
      or for

      \    displaying information about the connected instance.


      \    This tool does not require authentication as it only returns
      configuration information.


      \    Returns:

      \        A dictionary with the Superset base URL

      \    "
    inputSchema:
      type: object
      title: superset_config_get_base_urlArguments
      properties: {}
  - name: superset_advanced_data_type_convert
    description: "

      \    Convert a value to an advanced data type


      \    Makes a request to the /api/v1/advanced_data_type/convert endpoint to
      transform

      \    a value into the specified advanced data type format.


      \    Args:

      \        type_name: Name of the advanced data type

      \        value: Value to convert


      \    Returns:

      \        A dictionary with the converted value

      \    "
    inputSchema:
      type: object
      title: superset_advanced_data_type_convertArguments
      required:
        - type_name
        - value
      properties:
        value:
          title: Value
        type_name:
          type: string
          title: Type Name
  - name: superset_advanced_data_type_list
    description: "

      \    Get list of available advanced data types


      \    Makes a request to the /api/v1/advanced_data_type/types endpoint to
      retrieve

      \    all advanced data types supported by this Superset instance.


      \    Returns:

      \        A dictionary with available advanced data types and their
      configurations

      \    "
    inputSchema:
      type: object
      title: superset_advanced_data_type_listArguments
      properties: {}
