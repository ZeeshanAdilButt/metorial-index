tools:
  - name: search_and_scrape
    description: "Search for content using Tavily and scrape the most relevant
      result.

      \   \ 

      \    This function performs a two-step process:

      \    1. Uses Tavily search API to find the most relevant URLs for a given
      query

      \    2. Scrapes the content from the top-ranked URL using Firecrawl

      \   \ 

      \    Args:

      \        query (str): The search query to find relevant content. This
      query will be used

      \                    to search for and retrieve the most relevant webpage
      content.

      \       \ 

      \    Returns:

      \        str: The scraped content in markdown format from the most
      relevant webpage.

      \       \ 

      \    Example:

      \        >>> content = search_and_scrape(\"What is Python programming
      language?\")

      \        >>> print(content)

      \       \ 

      \    Raises:

      \        Exception: If the search fails or if the scraping process fails.

      \    "
    inputSchema:
      type: object
      title: search_and_scrapeArguments
      required:
        - query
      properties:
        query:
          type: string
          title: Query
  - name: list_directory
    description: "List contents of a directory.

      \   \ 

      \    This tool lists all files and directories in the specified path.

      \    If no path is provided, it lists the current directory.

      \   \ 

      \    Args:

      \        path (str, optional): The directory path to list. Defaults to
      current directory (\".\").

      \       \ 

      \    Returns:

      \        list: A list of dictionaries containing information about each
      item:

      \              - name: The name of the file/directory

      \              - type: Either \"file\" or \"directory\"

      \              - size: File size in bytes (for files only)

      \              - modified: Last modification timestamp

      \             \ 

      \    Example:

      \        >>> contents = list_directory(\"/path/to/directory\")

      \        >>> print(contents)

      \    "
    inputSchema:
      type: object
      title: list_directoryArguments
      properties:
        path:
          type: string
          title: Path
          default: .
  - name: get_current_directory
    description: "Get the current working directory.

      \   \ 

      \    Returns:

      \        str: The absolute path of the current working directory.

      \       \ 

      \    Example:

      \        >>> current_dir = get_current_directory()

      \        >>> print(current_dir)

      \    "
    inputSchema:
      type: object
      title: get_current_directoryArguments
      properties: {}
  - name: change_directory
    description: "Change the current working directory.

      \   \ 

      \    Args:

      \        path (str): The directory path to change to.

      \       \ 

      \    Returns:

      \        str: The new current working directory path.

      \       \ 

      \    Raises:

      \        Exception: If the directory doesn't exist or is not accessible.

      \       \ 

      \    Example:

      \        >>> new_dir = change_directory(\"/path/to/directory\")

      \        >>> print(new_dir)

      \    "
    inputSchema:
      type: object
      title: change_directoryArguments
      required:
        - path
      properties:
        path:
          type: string
          title: Path
  - name: file_info
    description: "Get detailed information about a file or directory.

      \   \ 

      \    Args:

      \        path (str): The path to the file or directory. Can be obtained
      from list_all_files()[\"files\"][i][\"path\"].

      \       \ 

      \    Returns:

      \        dict: A dictionary containing:

      \              - exists: Whether the path exists

      \              - type: \"file\" or \"directory\"

      \              - size: Size in bytes (for files)

      \              - created: Creation timestamp

      \              - modified: Last modification timestamp

      \              - accessed: Last access timestamp

      \              - absolute_path: Full absolute path

      \             \ 

      \    Example:

      \        >>> # Get all files first

      \        >>> all_files = list_all_files()

      \        >>> # Get info for first file

      \        >>> info = file_info(all_files[\"files\"][0][\"path\"])

      \        >>> print(info)

      \    "
    inputSchema:
      type: object
      title: file_infoArguments
      required:
        - path
      properties:
        path:
          type: string
          title: Path
  - name: create_directory
    description: "Create a new directory.

      \   \ 

      \    Args:

      \        path (str): The path where the directory should be created.

      \       \ 

      \    Returns:

      \        dict: A dictionary containing:

      \              - success: Boolean indicating if creation was successful

      \              - path: The created directory path

      \              - error: Error message if creation failed

      \             \ 

      \    Example:

      \        >>> result = create_directory(\"/path/to/new/directory\")

      \        >>> print(result)

      \    "
    inputSchema:
      type: object
      title: create_directoryArguments
      required:
        - path
      properties:
        path:
          type: string
          title: Path
  - name: scrape_content
    description: "Scrape content from a given URL and return it in markdown format.

      \   \ 

      \    This tool uses Firecrawl to extract content from a webpage and
      convert it to markdown format.

      \    It's designed to handle various types of web content and convert them
      into a consistent markdown representation.

      \   \ 

      \    Args:

      \        url (str): The URL of the webpage to scrape. Must be a valid
      HTTP/HTTPS URL.

      \       \ 

      \    Returns:

      \        str: The scraped content in markdown format.

      \       \ 

      \    Example:

      \        >>> content = scrape_content(\"https://example.com\")

      \        >>> print(content)

      \       \ 

      \    Raises:

      \        Exception: If the URL is invalid or if the scraping process
      fails.

      \    "
    inputSchema:
      type: object
      title: scrape_contentArguments
      required:
        - url
      properties:
        url:
          type: string
          title: url
  - name: read_file_content
    description: "Read and display the contents of a file with proper formatting.

      \   \ 

      \    This tool reads a file and returns its contents with metadata. For
      text files,

      \    it can optionally return specific line ranges. For markdown files, it
      includes

      \    rendered content.

      \   \ 

      \    Args:

      \        file_path (str): The path to the file to read. Can be obtained
      from list_all_files()[\"files\"][i][\"path\"].

      \        start_line (int, optional): Starting line number to read.
      Defaults to 1.

      \        end_line (int, optional): Ending line number to read. If None,
      reads entire file.

      \       \ 

      \    Returns:

      \        dict: A dictionary containing:

      \              - content: The file contents

      \              - rendered_content: Rendered markdown if applicable

      \              - metadata: File information (size, type, etc.)

      \              - error: Error message if reading fails

      \             \ 

      \    Example:

      \        >>> # Get all files first

      \        >>> all_files = list_all_files()

      \        >>> # Read content of first file

      \        >>> result = read_file_content(all_files[\"files\"][0][\"path\"])

      \        >>> print(result[\"content\"])

      \    "
    inputSchema:
      type: object
      title: read_file_contentArguments
      required:
        - file_path
      properties:
        end_line:
          type: integer
          title: End Line
          default: null
        file_path:
          type: string
          title: File Path
        start_line:
          type: integer
          title: Start Line
          default: 1
  - name: preview_file
    description: "Preview the beginning of a file.

      \   \ 

      \    This tool reads and displays the first few lines of a file, useful
      for

      \    quick file content inspection.

      \   \ 

      \    Args:

      \        file_path (str): The path to the file to preview. Can be obtained
      from list_all_files()[\"files\"][i][\"path\"].

      \        num_lines (int, optional): Number of lines to preview. Defaults
      to 10.

      \       \ 

      \    Returns:

      \        dict: A dictionary containing:

      \              - preview: The first few lines of the file

      \              - total_lines: Total number of lines in the file

      \              - metadata: File information

      \              - error: Error message if reading fails

      \             \ 

      \    Example:

      \        >>> # Get all files first

      \        >>> all_files = list_all_files()

      \        >>> # Preview first file

      \        >>> preview = preview_file(all_files[\"files\"][0][\"path\"],
      num_lines=5)

      \        >>> print(preview[\"preview\"])

      \    "
    inputSchema:
      type: object
      title: preview_fileArguments
      required:
        - file_path
      properties:
        file_path:
          type: string
          title: File Path
        num_lines:
          type: integer
          title: Num Lines
          default: 10
  - name: list_all_files
    description: "Recursively list all files in a directory and its subdirectories.

      \   \ 

      \    This tool walks through all directories and subdirectories to find
      all files,

      \    with options to exclude specific directories and file types.

      \   \ 

      \    Args:

      \        path (str, optional): The root directory to start from. Defaults
      to current directory (\".\").

      \        exclude_dirs (list, optional): List of directory names to exclude
      (e.g., ['node_modules', '.git']).

      \       \ 

      \    Returns:

      \        dict: A dictionary containing:

      \              - files: List of dictionaries with file information:

      \                - path: Full path to the file

      \                - name: File name

      \                - size: File size in bytes

      \                - type: File type (extension)

      \                - modified: Last modification timestamp

      \              - total_files: Total number of files found

      \              - total_size: Total size of all files in bytes

      \              - error: Error message if operation fails

      \             \ 

      \    Example:

      \        >>> result = list_all_files(\"/path/to/directory\",
      exclude_dirs=['node_modules'])

      \        >>> print(result[\"files\"])

      \    "
    inputSchema:
      type: object
      title: list_all_filesArguments
      properties:
        path:
          type: string
          title: Path
          default: .
        exclude_dirs:
          type: array
          items: {}
          title: Exclude Dirs
          default: null
  - name: find_files_by_type
    description: "Find all files of a specific type in a directory and its
      subdirectories.

      \   \ 

      \    Args:

      \        path (str, optional): The root directory to start from. Defaults
      to current directory (\".\").

      \        file_type (str, optional): The file extension to search for
      (e.g., '.py', '.js', '.md').

      \       \ 

      \    Returns:

      \        dict: A dictionary containing:

      \              - files: List of matching files with their details

      \              - total_matches: Number of files found

      \              - file_type: The type of files searched for

      \             \ 

      \    Example:

      \        >>> result = find_files_by_type(\"/path/to/directory\",
      file_type=\".py\")

      \        >>> print(result[\"files\"])

      \    "
    inputSchema:
      type: object
      title: find_files_by_typeArguments
      properties:
        path:
          type: string
          title: Path
          default: .
        file_type:
          type: string
          title: File Type
          default: null
