tools:
  - name: manage_jira_insight_schema
    description: Manage Jira Insights object schemas with CRUD operations
    inputSchema:
      type: object
      required:
        - operation
      properties:
        name:
          type: string
          description: Name of the schema. Required for create operation, optional for
            update.
        expand:
          type: array
          items:
            enum:
              - objectTypes
              - attributes
              - statistics
            type: string
          description: Optional fields to include in the response
        startAt:
          type: integer
          default: 0
          description: Index of the first schema to return (0-based). Used for list
            operation. Can also use snake_case "start_at".
        schemaId:
          type: string
          description: The ID of the schema. Required for get, update, and delete
            operations. Can also use snake_case "schema_id".
        operation:
          enum:
            - get
            - list
            - create
            - update
            - delete
          type: string
          description: Operation to perform on the schema
        maxResults:
          type: integer
          default: 50
          description: Maximum number of schemas to return. Used for list operation. Can
            also use snake_case "max_results".
        description:
          type: string
          description: Description of the schema. Optional for create/update.
  - name: manage_jira_insight_object_type
    description: Manage Jira Insights object types with CRUD operations
    inputSchema:
      type: object
      required:
        - operation
      properties:
        icon:
          type: string
          description: Icon for the object type. Optional for create/update.
        name:
          type: string
          description: Name of the object type. Required for create operation, optional
            for update.
        expand:
          type: array
          items:
            enum:
              - attributes
              - statistics
              - schema
            type: string
          description: Optional fields to include in the response
        startAt:
          type: integer
          default: 0
          description: Index of the first object type to return (0-based). Used for list
            operation. Can also use snake_case "start_at".
        schemaId:
          type: string
          description: The ID of the schema. Required for create operation. Can also use
            snake_case "schema_id".
        operation:
          enum:
            - get
            - list
            - create
            - update
            - delete
          type: string
          description: Operation to perform on the object type
        maxResults:
          type: integer
          default: 50
          description: Maximum number of object types to return. Used for list operation.
            Can also use snake_case "max_results".
        description:
          type: string
          description: Description of the object type. Optional for create/update.
        objectTypeId:
          type: string
          description: The ID of the object type. Required for get, update, and delete
            operations. Can also use snake_case "object_type_id".
  - name: manage_jira_insight_object
    description: Manage Jira Insights objects with CRUD operations and AQL queries
    inputSchema:
      type: object
      required:
        - operation
      properties:
        aql:
          type: string
          description: >-
            AQL query string. Required for query operation. 


            IMPORTANT: For comprehensive AQL documentation, refer to the
            "jira-insights://aql-syntax" resource using the access_mcp_resource
            tool. This resource contains detailed syntax guides, examples, and
            best practices.


            Guide to Constructing Better Jira Insight AQL Queries:


            Understanding AQL Fundamentals:

            - Object Type Case Sensitivity: Use exact case matching for object
            type names (e.g., ObjectType = "Supported laptops" not objectType =
            "Supported laptops").

            - String Values in Quotes: Always enclose string values in double
            quotes, especially values containing spaces (e.g., Name = "MacBook
            Pro" not Name = MacBook Pro).

            - Attribute References: Reference attributes directly by their name,
            not by a derived field name (e.g., use Name not name).

            - LIKE Operator Usage: Use the LIKE operator for partial string
            matching, but be aware it may be case-sensitive.


            Effective Query Construction:

            - Start Simple: Begin with the most basic query to validate object
            existence before adding complex filters:
              ObjectType = "Supported laptops"
            - Examine Response Objects: Study the first responses to understand
            available attribute names and formats before using them in filters.

            - Keyword Strategy: When searching for specific items, try multiple
            potential keywords (e.g., "ThinkPad", "Lenovo", "Carbon") rather
            than just exclusion logic.

            - Incremental Complexity: Add filter conditions incrementally,
            testing after each addition rather than constructing complex queries
            in one step.


            Managing Complex Queries:

            - AND/OR Operators: Structure complex conditions carefully with
            proper parentheses:
              ObjectType = "Supported laptops" AND (Name LIKE "ThinkPad" OR Name LIKE "Lenovo")
            - NOT Operators: Use NOT sparingly and with proper syntax:
              ObjectType = "Supported laptops" AND NOT Name LIKE "MacBook"
            - Reference Object Queries: For filtering on related objects, use
            their object key as a reference:
              ObjectType = "Supported laptops" AND Manufacturer = "PPL-231"
            - Pagination Awareness: For large result sets, utilize the startAt
            and maxResults parameters to get complete data.
        name:
          type: string
          description: Name of the object. Required for create operation, optional for
            update.
        expand:
          type: array
          items:
            enum:
              - attributes
              - objectType
              - schema
              - history
            type: string
          description: Optional fields to include in the response
        startAt:
          type: integer
          default: 0
          description: Index of the first object to return (0-based). Used for list and
            query operations. Can also use snake_case "start_at".
        objectId:
          type: string
          description: The ID of the object. Required for get, update, and delete
            operations. Can also use snake_case "object_id".
        schemaId:
          type: string
          description: The ID of the schema to use for enhanced validation. When provided,
            the query will be validated against the schema structure, providing
            better error messages and suggestions.
        operation:
          enum:
            - get
            - list
            - create
            - update
            - delete
            - query
          type: string
          description: Operation to perform on the object
        attributes:
          type: object
          description: Attributes of the object as key-value pairs. Optional for
            create/update.
        maxResults:
          type: integer
          default: 50
          description: Maximum number of objects to return. Used for list and query
            operations. Can also use snake_case "max_results".
        objectTypeId:
          type: string
          description: The ID of the object type. Required for create operation. Can also
            use snake_case "object_type_id".
        includeAttributes:
          type: boolean
          default: true
          description: Should the objects attributes be included in the response. If this
            parameter is false only the information on the object will be
            returned and the object attributes will not be present.
        simplifiedResponse:
          type: boolean
          default: true
          description: Return a simplified response with only essential key-value pairs,
            excluding detailed metadata, references, and type definitions.
            Useful for reducing response size and improving readability.
        includeExtendedInfo:
          type: boolean
          default: false
          description: Include information about open Jira issues. Should each object have
            information if open tickets are connected to the object?
        includeAttributesDeep:
          type: integer
          default: 1
          description: How many levels of attributes should be included. E.g. consider an
            object A that has a reference to object B that has a reference to
            object C. If object A is included in the response and
            includeAttributesDeep=1 object A's reference to object B will be
            included in the attributes of object A but object B's reference to
            object C will not be included. However if the
            includeAttributesDeep=2 then object B's reference to object C will
            be included in object B's attributes.
        includeTypeAttributes:
          type: boolean
          default: false
          description: Should the response include the object type attribute definition
            for each attribute that is returned with the objects.
        resolveAttributeNames:
          type: boolean
          default: true
          description: Replace attribute IDs (attr_xxx) with actual attribute names in the
            response. This provides more meaningful attribute names for better
            readability.
