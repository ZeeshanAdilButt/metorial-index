tools:
  - name: analyse_poker_cards
    description: "

      \    Suggests poker actions based on the current game state.

      \    This function evaluates a poker hand and provides strategic
      recommendations by calculating\ 

      \    win probabilities through Monte Carlo simulations.

      \    Parameters:

      \    ----------

      \    my_cards_input : str

      \        The player's two cards as a space-separated string of rank+suit
      where rank is one of [1,2,3,4,5,6,7,8,9,10,J,Q,K,A] suit is 'h' for
      hearts, 's' for spades, 'c' for clubs, and 'd' for diamonds (e.g., 'As
      Kh')

      \    community_input : str

      \        The community cards as a space-separated string (e.g., 'Jd 10c
      7h'), or empty if none

      \    opponent_input : str

      \        The opponent's cards as a space-separated string if known, or
      empty if unknown

      \    Returns:

      \    -------

      \    dict

      \        A dictionary containing:

      \        - 'win_probability': float, the calculated probability of winning
      the hand

      \        - 'suggested_action': str, the recommended action (fold,
      check/call, bet/raise)

      \        - 'best_hand': str or None, description of the best hand
      currently possible with the community cards,

      \        or None if no community cards are present

      \    "
    inputSchema:
      type: object
      title: analyse_poker_cardsArguments
      required:
        - my_cards_input
        - community_input
        - opponent_input
      properties:
        my_cards_input:
          type: string
          title: My Cards Input
        opponent_input:
          type: string
          title: Opponent Input
        community_input:
          type: string
          title: Community Input
  - name: get_best_nim_move
    description: "

      \    Determine the best move in a Nim game using the nim-sum strategy.

      \   \ 

      \    Args:

      \        piles: A list of integers representing the number of objects in
      each pile.

      \       \ 

      \    Returns:

      \        A tuple (pile_index, objects_to_remove) representing the best
      move.

      \        If no winning move exists, returns a safe move or the first valid
      move.

      \    "
    inputSchema:
      type: object
      title: get_best_nim_moveArguments
      required:
        - piles
      properties:
        piles:
          type: string
          title: piles
